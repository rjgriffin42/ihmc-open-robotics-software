buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "gradle.plugin.us.ihmc.gradle:ihmc-build:0.0.14"
		classpath "org.hidetake:gradle-ssh-plugin:0.3.12"
	}
}

apply plugin: "us.ihmc.gradle.ihmc-build"
apply plugin: "org.hidetake.ssh"

if(!rootProject.name.equals('IHMCOpenRoboticsSoftware')) { evaluationDependsOn(':IHMCOpenRoboticsSoftware') }

sourceCompatibility = 1.7
version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://www.apache.org/licenses/LICENSE-2.0.txt"
project.ext.licenseName = "Apache License, Version 2.0"
project.ext.bintrayLicenseName = "Apache-2.0"


repositories ihmc.ihmcDefaultArtifactProxies()

repositories {
	maven {
		url "https://bengal.ihmc.us/nexus/content/repositories/thirdparty/"
	}
}

repositories {
   mavenLocal()
   jcenter()
   mavenCentral()
}

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "maven-release", strings)

evaluationDependsOn(ihmc.getProjectDependencyGradlePath("IHMCJavaToolkit"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("IHMCRoboticsToolkit"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("DarpaRoboticsChallenge"))

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.11'
	compile group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'


	compile group: 'org.ejml', name: 'all', version: '0.28'
	compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
	compile group: 'org.yaml', name: 'snakeyaml', version: '1.16' //1.11
	compile group: 'com.jcraft', name: 'jsch', version: '0.1.51'
	compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	compile group: 'kryonet', name: 'kryonet', version: '2.21'
    compile group: 'com.esotericsoftware.kryo', name: 'kryo', version: '2.20'
    compile group: 'com.esotericsoftware', name: 'jsonbeans', version: '0.7'
	compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.+'
//	compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
	compile group: 'org.apache.sshd', name: 'sshd-core', version: '0.12.+'
	compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.2'

	compile group: 'us.ihmc', name: 'IHMCRosControl', version: '0.2.2'

	compile ihmc.getProjectDependency(":CommonWalkingControlModules")
	compile ihmc.getProjectDependency(":DarpaRoboticsChallenge")
	compile ihmc.getProjectDependency(":Graphics3DAdapter")

	compile ihmc.getProjectDependency(":IHMCROSTools")

	compile ihmc.getProjectDependency(":RobotDataCommunication")
	compile ihmc.getProjectDependency(":SDFLoader")
	compile ihmc.getProjectDependency(":SensorProcessing")
	compile ihmc.getProjectDependency(":SimulationConstructionSet")
    compile ihmc.getProjectDependency(":IHMCPerception")
    compile ihmc.getProjectDependency(":IHMCWholeBodyController")
	compile ihmc.getProjectDependency(":IHMCJavaToolkit")
	compile ihmc.getProjectDependency(":IHMCRoboticsToolkit")

	testCompile ihmc.getProjectDependency(":IHMCUnitTesting")

	testCompile ihmc.getProjectDependency(":IHMCJavaToolkit").sourceSets.test.output
	testCompile ihmc.getProjectDependency(":DarpaRoboticsChallenge").sourceSets.test.output
	testCompile ihmc.getProjectDependency(":IHMCRoboticsToolkit").sourceSets.test.output
}
apply plugin: 'application'
applicationName = "IHMCValkyrieAPI"
mainClassName = "us.ihmc.valkyrie.ValkyrieROSAPISimulator"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
	outputs.upToDateWhen { false }

	doLast {
		def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCValkyrieGazeboController")
		simUnixScriptGazebo.text = unixScript.text.replace("IHMCValkyrieAPI", "IHMCValkyrieGazeboController").replace("us.ihmc.valkyrie.ValkyrieROSAPISimulator", "us.ihmc.valkyrie.gazebo.ValkyrieGazeboControllerFactory")
		simUnixScriptGazebo.setExecutable(true)
	}
}

applicationDistribution.from(startScripts.outputDir) {
	into "bin"
}

remotes
		{
			valkyrieRealtimeComputer
					{
						host = project.hasProperty('valkyrie_link_ip') ? "${valkyrie_link_ip}" : "invalid"

						// Set the username and password in ~/.gradle/gradle.properties.
						user = project.hasProperty('valkyrie_realtime_username') ? "${valkyrie_realtime_username}" : "invalid"
						password = project.hasProperty('valkyrie_realtime_password') ? "${valkyrie_realtime_password}" : "invalid"

						knownHosts = allowAnyHosts
					}

			valkyrieNonRealtimeComputer
					{
						host = project.hasProperty('valkyrie_zelda_ip') ? "${valkyrie_zelda_ip}" : "invalid"

						// Set the username and password in ~/.gradle/gradle.properties.
						user = project.hasProperty('valkyrie_realtime_username') ? "${valkyrie_realtime_username}" : "invalid"
						password = project.hasProperty('valkyrie_realtime_password') ? "${valkyrie_realtime_password}" : "invalid"

						knownHosts = allowAnyHosts
					}
		}

jar {
	List depend = []
	configurations.runtime.each {
		if (!it.name.contains("IHMCHumanoidOperatorInterface")) {
			depend.add('lib/' + it.name)
		}
	}

	manifest {
		attributes(
				"Created-By": "IHMC Gradle Build Script",
				"Implementation-Title": project.name,
				"Implementation-Version": project.version,
				"Implementation-Vendor": "IHMC",

				"Bundle-Name": project.name,
				"Bundle-Version": project.version,
				"Bundle-License": "${project.ext.licenseURL}",
				"Bundle-Vendor": "IHMC",
				'Class-Path': depend.join(' '))
	}
}

task deployLocal(dependsOn: jar) {
	def directory = 'valkyrie'
	doLast {
		def dest = new File(System.properties['user.home'], directory)
		def lib = new File(dest, 'lib')
		lib.mkdirs();

		configurations.runtime.each
				{
					if (!it.name.contains("IHMCHumanoidOperatorInterface")) {
						def src = file(it)
						copy {
							from src
							into lib
						}
					}
				}

		copy {
			from jar.archivePath
			into dest
			rename { fileName -> "ValkyrieController.jar" }
		}

	}
}

task deploy(dependsOn: ['jar']) {

	def projectDir = project.buildscript.sourceFile.parent
	def directory = 'valkyrie'

	doLast {
		if (!project.hasProperty('valkyrie_realtime_username') || !project.hasProperty('valkyrie_realtime_password')) {
			throw new GradleException("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
		}

		if (!project.hasProperty('valkyrie_link_ip') || !project.hasProperty('valkyrie_zelda_ip')) {
			throw new GradleException("Please set valkyrie_link_ip and valkyrie_zelda_ip in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
		}

		sshexec {
			session(remotes.valkyrieRealtimeComputer)
					{
						execute("mkdir -p " + directory + "/lib")
						execute("mkdir -p " + directory + "/Configurations")

						configurations.runtime.each
								{
									put it, directory + '/lib'
								}

						put jar.archivePath, directory + '/ValkyrieController.jar'

						def scriptDir = new File(projectDir, "launchScripts/")
						def scriptDirCollection = files { scriptDir.listFiles() }
						put scriptDirCollection, directory

						scriptDirCollection.each
								{
									execute 'chmod 777 ' + directory + '/' + it.name
								}
					}

			session(remotes.valkyrieNonRealtimeComputer)
					{
						execute("mkdir -p " + directory + "/lib")
						execute("mkdir -p " + directory + "/Configurations")

						configurations.runtime.each
								{
									put it, directory + '/lib'
								}

						put jar.archivePath, directory + '/ValkyrieController.jar'

						def scriptDir = new File(projectDir, "launchScripts/")
						def scriptDirCollection = files { scriptDir.listFiles() }
						put scriptDirCollection, directory

						scriptDirCollection.each
								{
									execute 'chmod 777 ' + directory + '/' + it.name
								}
					}

		}
	}
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/../.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}
task createRosJar(type: Jar) {
    version = getCheckedOutGitCommitHash()
    manifest
			{
				attributes 'Implementation-Title': 'ROSAPI',
						'Implementation-Version': version,
						'Main-Class': 'us.ihmc.valkyrie.OpenHumanoidsSimulator'
			}

    baseName = 'OpenHumanoidsSimulator'
    from({ configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }) {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
		with jar
    }
}

task OH(type: Copy, dependsOn: [createRosJar]) {
    from createRosJar
    into "lib/"
}
