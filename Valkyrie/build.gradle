apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = "${rootProject.version}"

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()

buildscript {
  repositories {
	  jcenter()

	  maven{
		  url "https://bengal.ihmc.us/nexus/content/repositories/central/"
	  }
  }  
  dependencies {
      classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.5"
      classpath 'org.hidetake:gradle-ssh-plugin:0.3.12'
  }
}

apply plugin: 'application'
applicationName = "IHMCValkyrieAPI"
mainClassName = "us.ihmc.valkyrie.ValkyrieROSAPISimulator"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
	outputs.upToDateWhen { false }

	doLast {
		def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCValkyrieGazeboController")
		simUnixScriptGazebo.text = unixScript.text.replace("IHMCValkyrieAPI", "IHMCValkyrieGazeboController").replace("us.ihmc.valkyrie.ValkyrieROSAPISimulator", "us.ihmc.valkyrie.gazebo.ValkyrieGazeboControllerFactory")
		simUnixScriptGazebo.setExecutable(true)
	}
}

applicationDistribution.from(startScripts.outputDir) {
	into "bin"
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync

task awsDeploySim(type: S3Sync, dependsOn: distTar) {
	description = "Push current API release to AWS S3"
	configFile "aws.properties"

	from "${buildDir}/distributions"
	into "ihmc/api_releases"

	keepFiles true

	doFirst{
		if(!project.hasProperty("awsAccessKey") || !project.hasProperty("awsSecretKey"))
		{
			throw new TaskExecutionException(tasks.tasks.awsDeploySim, new StopActionException("AWS credentials not set, you should store them safely and locally in your user's gradle.properties (defaults to \$HOME/.gradle/gradle.properties)"));
		}

		accessKey awsAccessKey
		secretKey awsSecretKey

		def verManifestFile = new File("${buildDir}/distributions/val-version")

		verManifestFile.text = version
	}
}

apply plugin: 'org.hidetake.ssh'

remotes 
{
	valkyrieRealtimeComputer
	{
		host = project.hasProperty('valkyrie_link_ip')?"${valkyrie_link_ip}":"invalid"
		
		// Set the username and password in ~/.gradle/gradle.properties.
        user = project.hasProperty('valkyrie_realtime_username')?"${valkyrie_realtime_username}":"invalid"
        password = project.hasProperty('valkyrie_realtime_password')?"${valkyrie_realtime_password}":"invalid"
        
		knownHosts = allowAnyHosts
	}
	
	valkyrieNonRealtimeComputer
	{
		host = project.hasProperty('valkyrie_zelda_ip')?"${valkyrie_zelda_ip}":"invalid"
		
		// Set the username and password in ~/.gradle/gradle.properties.
        user = project.hasProperty('valkyrie_realtime_username')?"${valkyrie_realtime_username}":"invalid"
        password = project.hasProperty('valkyrie_realtime_password')?"${valkyrie_realtime_password}":"invalid"
        
		knownHosts = allowAnyHosts
	}
}

jar {
	List depend = []
	configurations.runtime.each {
		if(!it.name.contains("IHMCHumanoidOperatorInterface"))
		{
			depend.add('lib/' + it.name)
		}
	}
   
   manifest {
      attributes(
      "Created-By": "IHMC Gradle Build Script",
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Vendor": "IHMC",
      
      "Bundle-Name": project.name,
      "Bundle-Version": project.version,
      "Bundle-License": "IHMC Proprietary",
      "Bundle-Vendor": "IHMC",
      'Class-Path': depend.join(' '))
   }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

task deployLocal(dependsOn: jar) {
	def directory = 'valkyrie'
	doLast{
		def dest = new File(System.properties['user.home'], directory)
		def lib = new File(dest, 'lib')
		lib.mkdirs();
		
		configurations.runtime.each 
		{
			if(!it.name.contains("IHMCHumanoidOperatorInterface"))
			{
				def src = file(it)
				copy{
					from src
					into lib
				}
			}
		}
		
		copy{
			from jar.archivePath
			into dest
			rename { fileName -> "ValkyrieController.jar" }
		}
		
	}
}

task deploy(dependsOn: ['jar']) {
	
	def projectDir = project.buildscript.sourceFile.parent 
	def directory = 'valkyrie'

	doLast {
    	if(!project.hasProperty('valkyrie_realtime_username') || !project.hasProperty('valkyrie_realtime_password'))
    	{
    		throw new GradleException("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
    	}

		if(!project.hasProperty('valkyrie_link_ip') || !project.hasProperty('valkyrie_zelda_ip'))
		{
			throw new GradleException("Please set valkyrie_link_ip and valkyrie_zelda_ip in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
		}
	
		sshexec {
			session(remotes.valkyrieRealtimeComputer)
			{
				execute("mkdir -p " + directory + "/lib")
				execute("mkdir -p " + directory + "/Configurations")
				
				configurations.runtime.each 
				{
					put it, directory + '/lib'
				}
				
				put jar.archivePath, directory + '/ValkyrieController.jar'
				
				def scriptDir = new File(projectDir, "launchScripts/")
				def scriptDirCollection = files { scriptDir.listFiles() }
				put scriptDirCollection, directory
				
				scriptDirCollection.each
				{
					execute 'chmod 777 ' + directory + '/' + it.name
				}			
			}
			
			session(remotes.valkyrieNonRealtimeComputer)
			{
				execute("mkdir -p " + directory + "/lib")
				execute("mkdir -p " + directory + "/Configurations")
				
				configurations.runtime.each 
				{
					put it, directory + '/lib'
				}
				
				put jar.archivePath, directory + '/ValkyrieController.jar'
				
				def scriptDir = new File(projectDir, "launchScripts/")
				def scriptDirCollection = files { scriptDir.listFiles() }
				put scriptDirCollection, directory
				
				scriptDirCollection.each
				{
					execute 'chmod 777 ' + directory + '/' + it.name
				}
			}
			
		}
	}
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/../.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}


task createRosJar(type: Jar) {
    version = getCheckedOutGitCommitHash()
    manifest 
    {
        attributes 'Implementation-Title': 'ROSAPI',  
        'Implementation-Version': version,
        'Main-Class': 'us.ihmc.valkyrie.OpenHumanoidsSimulator'
    }
    
    baseName = 'OpenHumanoidsSimulator'
    from ( { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } ) {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
      with jar
    }
}

task OH(type: Copy, dependsOn: [createRosJar]) {
    from createRosJar
    into "lib/"
}
