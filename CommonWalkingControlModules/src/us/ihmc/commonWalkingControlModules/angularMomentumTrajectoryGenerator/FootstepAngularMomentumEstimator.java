package us.ihmc.commonWalkingControlModules.angularMomentumTrajectoryGenerator;

import java.util.ArrayList;
import java.util.List;

import us.ihmc.commonWalkingControlModules.configurations.CoPPointName;
import us.ihmc.commonWalkingControlModules.instantaneousCapturePoint.smoothCMP.CoPPointsInFoot;
import us.ihmc.commons.PrintTools;
import us.ihmc.graphicsDescription.yoGraphics.YoGraphicsList;
import us.ihmc.graphicsDescription.yoGraphics.plotting.ArtifactList;
import us.ihmc.robotics.geometry.FramePoint;
import us.ihmc.robotics.geometry.FrameVector;
import us.ihmc.robotics.math.frames.YoFrameVector;
import us.ihmc.robotics.referenceFrames.ReferenceFrame;
import us.ihmc.yoVariables.registry.YoVariableRegistry;
import us.ihmc.yoVariables.variable.YoDouble;
import us.ihmc.yoVariables.variable.YoInteger;

/**
 * Estimates the angular momentum generated by the swing foot about the CoM during a footstep
 * Needs a footstep CoP plan. Uses the entry, exit and end CoPs defined in the CoP plan to calculate a segmented CoM trajectory
 * The CoM trajectory is then used along with the footstep plan to determine the angular momentum generated
 *
 */
public class FootstepAngularMomentumEstimator implements AngularMomentumTrajectoryGeneratorInterface
{
   private static final ReferenceFrame worldFrame = ReferenceFrame.getWorldFrame();
   private final YoVariableRegistry registry = new YoVariableRegistry(getClass().getSimpleName());
   private final int maxNumberOfTrajectoryCoefficients = 4;
   private final int numberOfSwingSegments = 1;
   private final int numberOfTransferSegments = 2;
   private final int maxNumberOfFootstepsToConsider = 10;

   private final YoInteger numberOfFootstepsToConsider;
   private CoPPointName trajectoryPointStart;
   private CoPPointName trajectoryPointEnd;
   private CoPPointName trajectoryInitialDepartureReference;
   private CoPPointName trajectoryFinalApproachReference;
   private CoPPointName exitCoP;
   private CoPPointName entryCoP;
   private final YoDouble swingLegMass;
   private final YoDouble comHeight;
   private final YoDouble swingFootMaxHeight;

   private final List<CoPPointsInFoot> upcomingCoPsInFootsteps;

   private final List<SwingAngMomTrajectory> swingAngularMomentumTrajectories;
   private final List<TransferAngMomTrajectory> transferAngularMomentumTrajectories;

   private final FrameVector desiredAngularMomentum = new FrameVector();
   private final FrameVector desiredTorque = new FrameVector();
   private final FrameVector desiredRotatum = new FrameVector();

   //private final YoFrameTrajectory3D footstepCoMTrajectory;
   private final YoFrameTrajectory3D segmentCoMTrajectory;
   private final YoFrameTrajectory3D segmentCoMVelocity;
   private final YoFrameTrajectory3D swingFootTrajectory;
   private final YoFrameTrajectory3D swingFootVelocity;
   private final YoFrameTrajectory3D estimatedAngularMomentumTrajectory;
   private final YoFrameTrajectory3D previousEstimatedTransferTrajectory; // needed to compute the first double support trajectory segment 
   private AngularMomentumTrajectoryInterface activeTrajectory;
   private double initialTime;
   private double previousFirstTransferEndTime;
   private double currentFootstepTime;
   private double currentSwingSegmentDuration;
   private double currentFirstTransferSegmentDuration;
   private double currentSecondTransferSegmentDuration;

   private enum TrajectorySegment
   {
      END_TO_ENTRY, EXIT_TO_END, ENTRY_TO_EXIT
   };

   private final FramePoint tempFramePoint1 = new FramePoint(), tempFramePoint2 = new FramePoint(), tempFramePoint3 = new FramePoint(),
         tempFramePoint4 = new FramePoint();
   private int tempInt1, tempInt2;
   private int footstepIndex;
   private double tempDouble;
   private CoPPointsInFoot currentCoPPlanReference;
   private List<CoPPointName> currentCoPListReference;

   public FootstepAngularMomentumEstimator(String namePrefix, YoVariableRegistry parentRegistry)
   {
      this.numberOfFootstepsToConsider = new YoInteger(namePrefix + "AngularMomentumPlanMaxFootsteps", registry);
      this.swingLegMass = new YoDouble("SwingFootMassForAngularMomentumEstimation", registry);
      this.comHeight = new YoDouble("CoMHeightForAngularMomentumEstimation", registry);
      this.swingFootMaxHeight = new YoDouble("SwingFootMaxHeightForAngularMomentumEstimation", registry);

      this.swingAngularMomentumTrajectories = new ArrayList<>(maxNumberOfFootstepsToConsider);
      this.transferAngularMomentumTrajectories = new ArrayList<>(maxNumberOfFootstepsToConsider + 1);
      this.upcomingCoPsInFootsteps = new ArrayList<>(maxNumberOfFootstepsToConsider + 2);

      ReferenceFrame[] referenceFrames = {worldFrame};
      for (int i = 0; i < maxNumberOfFootstepsToConsider; i++)
      {
         SwingAngMomTrajectory swingTrajectory = new SwingAngMomTrajectory(namePrefix + "Footstep", i, registry, worldFrame, numberOfSwingSegments,
                                                                           2 * maxNumberOfTrajectoryCoefficients);
         this.swingAngularMomentumTrajectories.add(swingTrajectory);
         TransferAngMomTrajectory transferTrajectory = new TransferAngMomTrajectory(namePrefix + "Footstep", i, registry, worldFrame, numberOfTransferSegments,
                                                                                    2 * maxNumberOfTrajectoryCoefficients);
         this.transferAngularMomentumTrajectories.add(transferTrajectory);
         CoPPointsInFoot copLocations = new CoPPointsInFoot(i, referenceFrames, registry);
         upcomingCoPsInFootsteps.add(copLocations);
      }
      CoPPointsInFoot copLocations = new CoPPointsInFoot(maxNumberOfFootstepsToConsider, referenceFrames, registry);
      upcomingCoPsInFootsteps.add(copLocations);
      copLocations = new CoPPointsInFoot(maxNumberOfFootstepsToConsider + 1, referenceFrames, registry);
      upcomingCoPsInFootsteps.add(copLocations);
      TransferAngMomTrajectory transferTrajectory = new TransferAngMomTrajectory(namePrefix + "Footstep", maxNumberOfFootstepsToConsider, registry, worldFrame,
                                                                                 numberOfTransferSegments, 2 * maxNumberOfTrajectoryCoefficients);
      this.transferAngularMomentumTrajectories.add(transferTrajectory);

      //this.footstepCoMTrajectory = new YoFrameTrajectory3D("EstFootstepCoMTrajectory", maxNumberOfTrajectoryCoefficients, worldFrame, registry);
      this.segmentCoMTrajectory = new YoFrameTrajectory3D("EstSegmentTrajectory", maxNumberOfTrajectoryCoefficients, worldFrame, registry);
      this.segmentCoMVelocity = new YoFrameTrajectory3D("EstSegmentCoMVelocity", maxNumberOfTrajectoryCoefficients, worldFrame, registry);
      this.swingFootTrajectory = new YoFrameTrajectory3D("EstSegmentSwingTrajectory", maxNumberOfTrajectoryCoefficients, worldFrame, registry);
      this.swingFootVelocity = new YoFrameTrajectory3D("EstSegmentSwingVelocity", maxNumberOfTrajectoryCoefficients, worldFrame, registry);
      this.estimatedAngularMomentumTrajectory = new YoFrameTrajectory3D("EstSegmentAngularMomenetum", 2 * maxNumberOfTrajectoryCoefficients, worldFrame,
                                                                        registry);
      this.previousEstimatedTransferTrajectory = new YoFrameTrajectory3D("SaveEstAngMomTraj", 2 * maxNumberOfTrajectoryCoefficients, worldFrame, registry);
      parentRegistry.addChild(registry);
   }

   public void initializeParameters(AngularMomentumEstimationParameters angularMomentumParameters)
   {
      this.numberOfFootstepsToConsider.set(angularMomentumParameters.getNumberOfFootstepsToConsider());
      this.trajectoryPointStart = angularMomentumParameters.getInitialCoPPointName();
      this.trajectoryInitialDepartureReference = angularMomentumParameters.getInitialDepartureReferenceName();
      this.trajectoryPointEnd = angularMomentumParameters.getEndCoPName();
      this.trajectoryFinalApproachReference = angularMomentumParameters.getFinalApproachReferenceName();
      this.entryCoP = angularMomentumParameters.getEntryCoPName();
      this.exitCoP = angularMomentumParameters.getExitCoPName();
      this.swingLegMass.set(angularMomentumParameters.getSwingLegMass());
      this.comHeight.set(angularMomentumParameters.getCoMHeight());
      this.swingFootMaxHeight.set(angularMomentumParameters.getSwingFootMaxLift());
   }

   @Override
   public void updateListeners()
   {
      // TODO Auto-generated method stub      
   }

   @Override
   public void createVisualizerForConstantAngularMomentum(YoGraphicsList yoGraphicsList, ArtifactList artifactList)
   {
      // TODO Auto-generated method stub
   }

   @Override
   public void clear()
   {
      for (int i = 0; i < maxNumberOfFootstepsToConsider; i++)
      {
         swingAngularMomentumTrajectories.get(i).reset();
         transferAngularMomentumTrajectories.get(i).reset();
      }
      for (int i = 0; i < upcomingCoPsInFootsteps.size(); i++)
         upcomingCoPsInFootsteps.get(i).reset();
   }

   public void addFootstepCoPsToPlan(List<CoPPointsInFoot> copLocations)
   {
      for (int i = 0; i < copLocations.size(); i++)
         upcomingCoPsInFootsteps.get(i).setIncludingFrame(copLocations.get(i));
   }

   @Override
   public void update(double currentTime)
   {
      if (activeTrajectory != null)
         activeTrajectory.update(currentTime - initialTime, desiredAngularMomentum, desiredTorque, desiredRotatum);
   }

   @Override
   public void getDesiredAngularMomentum(FrameVector desiredAngMomToPack)
   {
      desiredAngMomToPack.setIncludingFrame(desiredAngularMomentum);
   }

   @Override
   public void getDesiredAngularMomentum(FrameVector desiredAngMomToPack, FrameVector desiredTorqueToPack)
   {
      desiredAngMomToPack.setIncludingFrame(desiredAngularMomentum);
      desiredTorqueToPack.setIncludingFrame(desiredTorque);
   }

   public void getDesiredAngularMomentum(FrameVector desiredAngMomToPack, FrameVector desiredTorqueToPack, FrameVector desiredRotatumToPack)
   {
      desiredAngMomToPack.setIncludingFrame(desiredAngularMomentum);
      desiredTorqueToPack.setIncludingFrame(desiredTorque);
      desiredRotatumToPack.setIncludingFrame(desiredRotatum);
   }

   @Override
   public void getDesiredAngularMomentum(YoFrameVector desiredAngMomToPack)
   {
      desiredAngMomToPack.set(desiredAngularMomentum);
   }

   @Override
   public void getDesiredAngularMomentum(YoFrameVector desiredAngMomToPack, YoFrameVector desiredTorqueToPack)
   {
      desiredAngMomToPack.set(desiredAngularMomentum);
      desiredTorqueToPack.set(desiredTorque);
   }

   public void getDesiredAngularMomentum(YoFrameVector desiredAngMomToPack, YoFrameVector desiredTorqueToPack, YoFrameVector desiredRotatumToPack)
   {
      desiredAngMomToPack.set(desiredAngularMomentum);
      desiredTorqueToPack.set(desiredTorque);
      desiredRotatumToPack.set(desiredRotatum);
   }

   @Override
   public void initializeForTransfer(double currentTime)
   {
      initialTime = currentTime;
      activeTrajectory = transferAngularMomentumTrajectories.get(0);
   }

   @Override
   public void initializeForSwing(double currentTime)
   {
      initialTime = currentTime;
      activeTrajectory = swingAngularMomentumTrajectories.get(0);
   }

   @Override
   public void computeReferenceAngularMomentumStartingFromDoubleSupport(boolean atAStop)
   {
      PrintTools.debug("Double Support");
      footstepIndex = 0;
      if (atAStop)
         previousFirstTransferEndTime = 0.0;
      else
      {
         // Use the previously planned trajectory from the single support
         transferAngularMomentumTrajectories.get(footstepIndex).set(previousEstimatedTransferTrajectory);
         previousFirstTransferEndTime = previousEstimatedTransferTrajectory.getFinalTime();
      }
      computeAngularMomentumApproximationForUpcomingFootsteps();
   }

   @Override
   public void computeReferenceAngularMomentumStartingFromSingleSupport()
   {
      PrintTools.debug("Single Support");
      footstepIndex = 0;
      previousFirstTransferEndTime = 0.0;
      updateCurrentSegmentTimes(footstepIndex);
      //setCoMTrajectoryForFootstep(footstepIndex);
      computeAngularMomentumApproximationForFootstep();
      // Save the EXIT_TO_END trajectory for the next planning cycle
      previousEstimatedTransferTrajectory.set(transferAngularMomentumTrajectories.get(footstepIndex + 1).getSegments().get(0));
      footstepIndex++;
      computeAngularMomentumApproximationForUpcomingFootsteps();
   }

   private void computeAngularMomentumApproximationForUpcomingFootsteps()
   {
      for (; footstepIndex + 1 < upcomingCoPsInFootsteps.size() && !upcomingCoPsInFootsteps.get(footstepIndex + 1).getCoPPointList().isEmpty(); footstepIndex++)
      {
         updateCurrentSegmentTimes(footstepIndex);
         //setCoMTrajectoryForFootstep(footstepIndex);
         computeAngularMomentumApproximationForFootstep();
      }
   }

   // This function assumes that all setup for the footstep has been carried out already 
   private void computeAngularMomentumApproximationForFootstep()
   {
      computeAngularMomentumApproximationForFootstep(TrajectorySegment.END_TO_ENTRY);
   }

   private void computeAngularMomentumApproximationForFootstep(TrajectorySegment startFromSegment)
   {
      //      PrintTools.debug("Called");
      switch (startFromSegment)
      {
      case END_TO_ENTRY:
         computeAngularMomentumForSecondTransferSegment();
      case ENTRY_TO_EXIT:
         computeAngularMomentumForSwing();
      default:
         computeAngularMomentumForFirstTransfer();
      }
      previousFirstTransferEndTime = currentFirstTransferSegmentDuration;
   }

   private void computeAngularMomentumForSecondTransferSegment()
   {
      //offsetCoMTrajectoryForSegment(0.0, currentSecondTransferSegmentDuration, previousFirstTransferEndTime);
      setCoMTrajectoryForSecondTransfer(previousFirstTransferEndTime);
      setSwingFootTrajectoryForSecondTransfer(footstepIndex, previousFirstTransferEndTime);
      calculateAngularMomentumTrajectory();
      transferAngularMomentumTrajectories.get(footstepIndex).set(estimatedAngularMomentumTrajectory);
   }

   private void computeAngularMomentumForSwing()
   {
      //offsetCoMTrajectoryForSegment(currentSecondTransferSegmentDuration, currentSwingSegmentDuration, -currentSecondTransferSegmentDuration);
      setCoMTrajectoryForSwing();
      setSwingFootTrajectoryForSwing(footstepIndex);
      calculateAngularMomentumTrajectory();
      swingAngularMomentumTrajectories.get(footstepIndex).set(estimatedAngularMomentumTrajectory);
   }

   private void computeAngularMomentumForFirstTransfer()
   {
      //offsetCoMTrajectoryForSegment(currentSwingSegmentDuration, currentFootstepTime, -currentSwingSegmentDuration);
      setCoMTrajectoryForFirstTransfer();
      setSwingFootTrajectoryForFirstTransfer(footstepIndex);
      calculateAngularMomentumTrajectory();
      transferAngularMomentumTrajectories.get(footstepIndex + 1).set(estimatedAngularMomentumTrajectory);
   }

   private void calculateAngularMomentumTrajectory()
   {
      estimatedAngularMomentumTrajectory.subtract(segmentCoMTrajectory, swingFootTrajectory);
      swingFootVelocity.subtract(segmentCoMVelocity);
      estimatedAngularMomentumTrajectory.crossProduct(swingFootVelocity);
      estimatedAngularMomentumTrajectory.scale(swingLegMass.getDoubleValue());
   }

   private void setSwingFootTrajectoryForSwing(int footstepIndex)
   {
      upcomingCoPsInFootsteps.get(footstepIndex).getFootLocation(tempFramePoint1);
      upcomingCoPsInFootsteps.get(footstepIndex + 1).getFootLocation(tempFramePoint2);
      tempFramePoint3.interpolate(tempFramePoint1, tempFramePoint2, 0.5);
      tempFramePoint3.add(0.0, 0.0, swingFootMaxHeight.getDoubleValue());
      swingFootTrajectory.setQuadraticUsingIntermediatePoint(0.0, currentSwingSegmentDuration / 2.0, currentSwingSegmentDuration, tempFramePoint1,
                                                             tempFramePoint3, tempFramePoint2);
      swingFootTrajectory.getDerivative(swingFootVelocity);
      //      PrintTools.debug("SwingFootSwing:\n" + swingFootTrajectory.toString());
   }

   // First transfer - exitCoP to endCoP
   // Second transfer - endCoP to entry CoP
   private void setSwingFootTrajectoryForFirstTransfer(int footstepIndex)
   {
      upcomingCoPsInFootsteps.get(footstepIndex + 1).getFootLocation(tempFramePoint1);
      swingFootTrajectory.setConstant(0.0, currentFirstTransferSegmentDuration, tempFramePoint1);
      swingFootTrajectory.getDerivative(swingFootVelocity);
      //      PrintTools.debug("SwingFoot1Transfer:\n" + swingFootTrajectory.toString());
   }

   private void setSwingFootTrajectoryForSecondTransfer(int footstepIndex, double segmentStartTime)
   {
      upcomingCoPsInFootsteps.get(footstepIndex).getFootLocation(tempFramePoint1);
      swingFootTrajectory.setConstant(segmentStartTime, segmentStartTime + currentSecondTransferSegmentDuration, tempFramePoint1);
      swingFootTrajectory.getDerivative(swingFootVelocity);
   }

   private void setCoMTrajectoryForSwing()
   {
      getCoMEstimationWaypoints();
      segmentCoMTrajectory.setCubicBezier(-currentSecondTransferSegmentDuration, currentSwingSegmentDuration + currentFirstTransferSegmentDuration,
                                          tempFramePoint1, tempFramePoint2, tempFramePoint3, tempFramePoint4);
      segmentCoMTrajectory.setTime(0.0, currentSwingSegmentDuration);
      segmentCoMTrajectory.getDerivative(segmentCoMVelocity);
   }

   private void setCoMTrajectoryForFirstTransfer()
   {
      getCoMEstimationWaypoints();
      segmentCoMTrajectory.setCubicBezier(-(currentSecondTransferSegmentDuration + currentSwingSegmentDuration), currentFirstTransferSegmentDuration,
                                          tempFramePoint1, tempFramePoint2, tempFramePoint3, tempFramePoint4);
      segmentCoMTrajectory.setTime(0.0, currentFirstTransferSegmentDuration);
      segmentCoMTrajectory.getDerivative(segmentCoMVelocity);
   }

   private void setCoMTrajectoryForSecondTransfer(double startTime)
   {
      getCoMEstimationWaypoints();
      segmentCoMTrajectory.setCubicBezier(startTime, startTime + currentSecondTransferSegmentDuration, tempFramePoint1, tempFramePoint2, tempFramePoint3,
                                          tempFramePoint4);
      segmentCoMTrajectory.setTime(startTime, startTime + currentSecondTransferSegmentDuration);
      segmentCoMTrajectory.getDerivative(segmentCoMVelocity);
   }

   private void getCoMEstimationWaypoints()
   {
      upcomingCoPsInFootsteps.get(footstepIndex).get(trajectoryPointStart).getPosition(tempFramePoint1);
      tempFramePoint1.add(0, 0, comHeight.getDoubleValue());
      upcomingCoPsInFootsteps.get(footstepIndex + 1).get(trajectoryInitialDepartureReference).getPosition(tempFramePoint2);
      tempFramePoint2.add(0, 0, comHeight.getDoubleValue());
      upcomingCoPsInFootsteps.get(footstepIndex + 1).get(trajectoryFinalApproachReference).getPosition(tempFramePoint3);
      tempFramePoint3.add(0, 0, comHeight.getDoubleValue());
      upcomingCoPsInFootsteps.get(footstepIndex + 1).get(trajectoryPointEnd).getPosition(tempFramePoint4);
      tempFramePoint4.add(0, 0, comHeight.getDoubleValue());
   }

   //   private void offsetCoMTrajectoryForSegment(double startTime, double endTime, double timeOffset)
   //   {
   //      segmentCoMTrajectory.set(footstepCoMTrajectory);
   //      segmentCoMTrajectory.setTime(startTime, endTime);
   //      segmentCoMTrajectory.addTimeOffset(timeOffset);
   //      PrintTools.debug("Offset CoM Traj: " + segmentCoMTrajectory.toString());
   //      segmentCoMTrajectory.getDerivative(segmentCoMVelocity);
   //   }
   //
   //   private void setCoMTrajectoryForFootstep(int footstepIndex)
   //   {
   //      upcomingCoPsInFootsteps.get(footstepIndex).get(trajectoryPointStart).getPosition(tempFramePoint1);
   //      tempFramePoint1.add(0, 0, comHeight.getDoubleValue());
   //      upcomingCoPsInFootsteps.get(footstepIndex + 1).get(trajectoryInitialDepartureReference).getPosition(tempFramePoint2);
   //      tempFramePoint2.add(0, 0, comHeight.getDoubleValue());
   //      upcomingCoPsInFootsteps.get(footstepIndex + 1).get(trajectoryFinalApproachReference).getPosition(tempFramePoint3);
   //      tempFramePoint3.add(0, 0, comHeight.getDoubleValue());
   //      upcomingCoPsInFootsteps.get(footstepIndex + 1).get(trajectoryPointEnd).getPosition(tempFramePoint4);
   //      tempFramePoint4.add(0, 0, comHeight.getDoubleValue());
   //      PrintTools.debug("Point1: " + tempFramePoint1.toString() + "Point2: " + tempFramePoint2.toString() + "Point3: " + tempFramePoint3.toString() + "Point4: "
   //            + tempFramePoint4.toString());
   //      PrintTools.debug("Current: " + currentFootstepTime);
   //      footstepCoMTrajectory.setCubicBezier(0.0, currentFootstepTime, tempFramePoint1, tempFramePoint2, tempFramePoint3, tempFramePoint4);
   //      PrintTools.debug("CoMTrajectory: " + footstepCoMTrajectory.toString());
   //   }

   private void updateCurrentSegmentTimes(int footstepIndex)
   {
      this.currentFootstepTime = 0.0;
      currentCoPPlanReference = upcomingCoPsInFootsteps.get(footstepIndex + 1);
      currentCoPListReference = currentCoPPlanReference.getCoPPointList();
      if (currentCoPListReference.isEmpty())
         return;
      currentSecondTransferSegmentDuration = 0.0;
      for (tempInt1 = 0; currentCoPListReference.get(tempInt1) != entryCoP; tempInt1++)
         currentSecondTransferSegmentDuration += currentCoPPlanReference.get(currentCoPListReference.get(tempInt1)).getTime();
      currentSecondTransferSegmentDuration += currentCoPPlanReference.get(currentCoPListReference.get(tempInt1)).getTime();
      tempInt1++;
      currentSwingSegmentDuration = 0.0;
      for (; currentCoPListReference.get(tempInt1) != exitCoP; tempInt1++)
         currentSwingSegmentDuration += currentCoPPlanReference.get(currentCoPListReference.get(tempInt1)).getTime();
      currentSwingSegmentDuration += currentCoPPlanReference.get(currentCoPListReference.get(tempInt1)).getTime();
      tempInt1++;
      currentFirstTransferSegmentDuration = 0.0;
      for (; tempInt1 < currentCoPListReference.size(); tempInt1++)
         currentFirstTransferSegmentDuration += currentCoPPlanReference.get(currentCoPListReference.get(tempInt1)).getTime();
      currentFootstepTime = currentSecondTransferSegmentDuration + currentSwingSegmentDuration + currentFirstTransferSegmentDuration;
//      PrintTools.debug("F" + footstepIndex + " T2: " + currentSecondTransferSegmentDuration + " S:" + currentSwingSegmentDuration + " T1:"
//            + currentFirstTransferSegmentDuration);
   }

   @Override
   public List<? extends AngularMomentumTrajectory> getTransferAngularMomentumTrajectories()
   {
      //      PrintTools.debug("-----------------------------");
      //      for(int i = 0; i < transferAngularMomentumTrajectories.size(); i++)
      //         PrintTools.debug(transferAngularMomentumTrajectories.get(0).toString());
      //      PrintTools.debug("-----------------------------");
      return transferAngularMomentumTrajectories;
   }

   @Override
   public List<? extends AngularMomentumTrajectory> getSwingAngularMomentumTrajectories()
   {
      //      PrintTools.debug(swingAngularMomentumTrajectories.get(0).toString());
      return swingAngularMomentumTrajectories;
   }
}
