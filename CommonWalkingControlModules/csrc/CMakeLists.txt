cmake_minimum_required(VERSION 2.6)
project(CommonWalkingControlModules)
if(WIN32)
	set(CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL} /MT")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
	set(CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL} /MT")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
endif(WIN32)


include_directories(${JNI_INCLUDE_DIRS}) 

add_library(LeeGoswamiForceOptimizer SHARED LeeGoswamiForceOptimizerNative.c leeGoswamiForceOptimizer/util.c leeGoswamiForceOptimizer/solver.c leeGoswamiForceOptimizer/matrix_support.c leeGoswamiForceOptimizer/ldl.c)
if(NOT WIN32)
	target_link_libraries(LeeGoswamiForceOptimizer m)
	if(APPLE)
		set_target_properties(LeeGoswamiForceOptimizer PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(LeeGoswamiCoPAndNormalTorqueOptimizer SHARED LeeGoswamiCoPAndNormalTorqueOptimizerNative.c leeGoswamiCoPAndNormalTorqueOptimizer/util.c leeGoswamiCoPAndNormalTorqueOptimizer/solver.c leeGoswamiCoPAndNormalTorqueOptimizer/matrix_support.c leeGoswamiCoPAndNormalTorqueOptimizer/ldl.c)
if(NOT WIN32)
	target_link_libraries(LeeGoswamiCoPAndNormalTorqueOptimizer m)
	if(APPLE)
		set_target_properties(LeeGoswamiCoPAndNormalTorqueOptimizer PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(ContactPointWrenchOptimizer SHARED ContactPointWrenchOptimizerNative.c contactPointWrenchOptimizer/util.c contactPointWrenchOptimizer/solver.c contactPointWrenchOptimizer/matrix_support.c contactPointWrenchOptimizer/ldl.c)
if(NOT WIN32)
	target_link_libraries(ContactPointWrenchOptimizer m)
	if(APPLE)
		set_target_properties(ContactPointWrenchOptimizer PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(MomentumOptimizer SHARED MomentumOptimizerNative.c momentumOptimizer/util.c momentumOptimizer/solver.c momentumOptimizer/matrix_support.c momentumOptimizer/ldl.c)
if(NOT WIN32)
	target_link_libraries(MomentumOptimizer m)
	if(APPLE)
		set_target_properties(MomentumOptimizer PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(CVXWithCylinder SHARED CVXWithCylinderNative.c CVXWithCylinder/util.c CVXWithCylinder/solver.c CVXWithCylinder/matrix_support.c CVXWithCylinder/ldl.c)
if(NOT WIN32)
	target_link_libraries(CVXWithCylinder m)
	if(APPLE)
		set_target_properties(CVXWithCylinder PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(CylinderAndPlaneContactForceOptimizer SHARED CylinderAndPlaneContactForceOptimizerNative.c cylinderAndPlaneContactForceOptimizer/util.c cylinderAndPlaneContactForceOptimizer/solver.c cylinderAndPlaneContactForceOptimizer/matrix_support.c cylinderAndPlaneContactForceOptimizer/ldl.c)
if(NOT WIN32)
	target_link_libraries(CylinderAndPlaneContactForceOptimizer m)
	if(APPLE)
		set_target_properties(CylinderAndPlaneContactForceOptimizer PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(CVXMomentumOptimizerWithGRFSmoother SHARED CVXMomentumOptimizerWithGRFSmootherNative.c CVXMomentumOptimizerWithGRFSmoother/util.c CVXMomentumOptimizerWithGRFSmoother/solver.c CVXMomentumOptimizerWithGRFSmoother/matrix_support.c CVXMomentumOptimizerWithGRFSmoother/ldl.c)
if(NOT WIN32)
	target_link_libraries(CVXMomentumOptimizerWithGRFSmoother m)
	if(APPLE)
		set_target_properties(CVXMomentumOptimizerWithGRFSmoother PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

add_library(CVXMomentumOptimizerWithGRFPenalizedSmoother SHARED CVXMomentumOptimizerWithGRFPenalizedSmootherNative.c CVXMomentumOptimizerWithGRFPenalizedSmoother/util.c CVXMomentumOptimizerWithGRFPenalizedSmoother/solver.c CVXMomentumOptimizerWithGRFPenalizedSmoother/matrix_support.c CVXMomentumOptimizerWithGRFPenalizedSmoother/ldl.c)
if(NOT WIN32)
	target_link_libraries(CVXMomentumOptimizerWithGRFPenalizedSmoother m)
	if(APPLE)
		set_target_properties(CVXMomentumOptimizerWithGRFPenalizedSmoother PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

if(UNIX)
	find_package(PkgConfig)
	pkg_check_modules(PC_EIGEN eigen3)
	include_directories(${PC_EIGEN_INCLUDE_DIRS})
endif()

add_library(ActiveSetQPMomentumOptimizer SHARED ActiveSetQPMomentumOptimizer.cpp ActiveSetQP/QP.cpp)
if(NOT WIN32)
	target_link_libraries(ActiveSetQPMomentumOptimizer m)
	if(APPLE)
		set_target_properties(ActiveSetQPMomentumOptimizer PROPERTIES SUFFIX .jnilib)
	endif(APPLE)
endif()

INSTALL(TARGETS LeeGoswamiForceOptimizer LeeGoswamiCoPAndNormalTorqueOptimizer ContactPointWrenchOptimizer MomentumOptimizer CVXWithCylinder CylinderAndPlaneContactForceOptimizer CVXMomentumOptimizerWithGRFSmoother CVXMomentumOptimizerWithGRFPenalizedSmoother ActiveSetQPMomentumOptimizer RUNTIME DESTINATION lib LIBRARY DESTINATION lib)
