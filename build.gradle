apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = '0.0.1'

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()

buildscript {
  repositories {
	  jcenter()

	  maven{
		  url "https://bengal.ihmc.us/nexus/content/repositories/central/"
	  }
  }  
  dependencies {
      classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.5"
      classpath 'org.hidetake:gradle-ssh-plugin:0.3.12'
  }
}

apply plugin: 'application'
applicationName = "IHMCValkyrieAPI"
mainClassName = "us.ihmc.valkyrie.ValkyrieROSAPISimulator"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
	outputs.upToDateWhen { false }

	doLast {
		def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCValkyrieGazeboController")
		simUnixScriptGazebo.text = unixScript.text.replace("IHMCValkyrieAPI", "IHMCValkyrieGazeboController").replace("us.ihmc.valkyrie.ValkyrieROSAPISimulator", "us.ihmc.valkyrie.gazebo.ValkyrieGazeboControllerFactory")
		simUnixScriptGazebo.setExecutable(true)
	}
}

applicationDistribution.from(startScripts.outputDir) {
	into "bin"
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync

task awsDeploySim(type: S3Sync, dependsOn: distTar) {
	description = "Push current API release to AWS S3"
	configFile "aws.properties"

	from "${buildDir}/distributions"
	into "ihmc/api_releases"

	keepFiles true

	doFirst{
		if(!project.hasProperty("awsAccessKey") || !project.hasProperty("awsSecretKey"))
		{
			throw new TaskExecutionException(tasks.tasks.awsDeploySim, new StopActionException("AWS credentials not set, you should store them safely and locally in your user's gradle.properties (defaults to \$HOME/.gradle/gradle.properties)"));
		}

		accessKey awsAccessKey
		secretKey awsSecretKey

		def verManifestFile = new File("${buildDir}/distributions/val-version")

		verManifestFile.text = version
	}
}

apply plugin: 'org.hidetake.ssh'

remotes 
{
	valkyrieRealtimeComputer
	{
		host = '10.3.0.10'
		
		// Set the username and password in ~/.gradle/gradle.properties.
        user = project.hasProperty('valkyrie_realtime_username')?"${valkyrie_realtime_username}":"invalid"
        password = project.hasProperty('valkyrie_realtime_password')?"${valkyrie_realtime_password}":"invalid"
        
		knownHosts = allowAnyHosts
	}
}

jar {
	List depend = []
	configurations.runtime.each {
		if(!it.name.contains("IHMCHumanoidOperatorInterface"))
		{
			depend.add('lib/' + it.name)
		}
	}
   
   manifest {
      attributes(
      "Created-By": "IHMC Gradle Build Script",
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Vendor": "IHMC",
      
      "Bundle-Name": project.name,
      "Bundle-Version": project.version,
      "Bundle-License": "IHMC Proprietary",
      "Bundle-Vendor": "IHMC",
      'Class-Path': depend.join(' '))
   }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

task deployLocal(dependsOn: jar) {
	def directory = 'valkyrie'
	doLast{
		def dest = new File(System.properties['user.home'], directory)
		def lib = new File(dest, 'lib')
		lib.mkdirs();
		
		configurations.runtime.each 
		{
			if(!it.name.contains("IHMCHumanoidOperatorInterface"))
			{
				def src = file(it)
				copy{
					from src
					into lib
				}
			}
		}
		
		copy{
			from jar.archivePath
			into dest
			rename { fileName -> "ValkyrieController.jar" }
		}
		
	}
}

task mipsservercmake(type:Exec) {
	def projectDir = project.buildscript.sourceFile.parent
	
	mkdir new File(projectDir, "cbuild")
		
	workingDir "${projectDir}/cbuild"
	commandLine 'cmake', '..'

}

task mipsservermake(type:Exec, dependsOn: 'mipsservercmake') {
	def projectDir = project.buildscript.sourceFile.parent
	workingDir "${projectDir}/cbuild"
	commandLine 'make'
}

task deploy(dependsOn: ['jar', 'mipsservermake']) {
	
	def projectDir = project.buildscript.sourceFile.parent 
	def directory = 'valkyrie'

	doLast {
    	if(!project.hasProperty('valkyrie_realtime_username') || !project.hasProperty('valkyrie_realtime_password'))
    	{
    		throw new GradleException("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
    	}
	
		sshexec {
			session(remotes.valkyrieRealtimeComputer)
			{
				execute("mkdir -p " + directory + "/lib")
				execute("mkdir -p " + directory + "/Configurations")
				
				configurations.runtime.each 
				{
					put it, directory + '/lib'
				}
				
				put jar.archivePath, directory + '/ValkyrieController.jar'
				
				def scriptDir = new File(projectDir, "launchScripts/")
				def scriptDirCollection = files { scriptDir.listFiles() }
				put scriptDirCollection, directory
				
				def microstrainCalibrator = new File(projectDir, "cbuild/csrc/MicrostrainCalibrator/MicrostrainCalibrator")
				def microstrainServer = new File(projectDir, "cbuild/csrc/MicrostrainMIPServer/MicrostrainMipServer")
				
				put microstrainCalibrator, directory
				put microstrainServer, directory
				
				execute 'chmod 777 ' + directory + '/MicrostrainCalibrator'
				execute 'chmod 777 ' + directory + '/MicrostrainMipServer'
				
				scriptDirCollection.each
				{
					execute 'chmod 777 ' + directory + '/' + it.name
				}			
				
			}
			
		}
	}
}


/*
task svnversion {
  description 'Get SVN revision number.'
  new ByteArrayOutputStream().withStream { os ->
    def result = exec {
      executable = 'svnversion'
      standardOutput = os
    }
    def tmp=os.toString()
    ext.revid = tmp.substring(0,tmp.lastIndexOf("M"))
  }
}

task createRosJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'ROSAPI',  
        	'Implementation-Version': svnversion.revid,
        	'Main-Class': 'us.ihmc.valkyrie.ValkyrieIPABSimulator'
    }
    version = svnversion.revid
    baseName = 'ValkyrieIPABSimulator'
    from ( { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } ) {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
      with jar
    }
}

task rosJar(type: Copy) {
    from createRosJar
    into "lib/"
}*/
