plugins {
   id 'us.ihmc.gradle.ihmc-build' version '0.0.9'
}

if(!rootProject.name.equals('IHMCOpenRoboticsSoftware')) { evaluationDependsOn(':IHMCOpenRoboticsSoftware') }

sourceCompatibility = 1.7
version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://gnu.org/licenses/gpl-3.0.txt"
project.ext.licenseName = "GPLv3"
project.ext.bintrayLicenseName = "GPL-3.0"

repositories {
	maven {
	    url "https://github.com/rosjava/rosjava_mvn_repo/raw/master"
	}
}
repositories ihmc.ihmcDefaultArtifactProxies()

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "ihmc-robotics-releases", strings)

evaluationDependsOn(ihmc.getProjectDependencyGradlePath("DarpaRoboticsChallenge"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("CommonWalkingControlModules"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("Graphics3DAdapter"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("IHMCWholeBodyController"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("IHMCHumanoidRobotics"))
evaluationDependsOn(ihmc.getProjectDependencyGradlePath("SensorProcessing"))

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.7'
    compile group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'

	compile group: 'org.ejml', name: 'all', version: '0.28'
    compile group: 'org.georegression' , name: 'georegression', version: '0.8'
    compile group: 'org.boofcv', name: 'all', version: '0.19'
    //compile group: 'org.lwjgl.lwjgl', name: 'lwjgl', version: '2.9.0'
	compile group: 'org.ddogleg' , name: 'ddogleg', version: '0.7'
    compile group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.7'
    compile group: 'org.apache.ant', name: 'ant', version: '1.9.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
    compile group: 'colt', name: 'colt', version: '1.2.0'
    compile group: 'com.vividsolutions', name: 'jts', version: '1.13'
   	compile group: 'us.ihmc.thirdparty.jinput', name: 'jinput', version: 'internal-151123'
	compile group: 'org.ros.rosjava_core', name: 'rosjava', version: '0.2.1'

    compile ihmc.getProjectDependency(":CommonWalkingControlModules")
    compile ihmc.getProjectDependency(":DarpaRoboticsChallenge")
    compile ihmc.getProjectDependency(":Graphics3DAdapter")
    compile ihmc.getProjectDependency(":IHMCHumanoidRobotics")
    compile ihmc.getProjectDependency(":IHMCCommunication")

    compile ihmc.getProjectDependency(":IHMCJavaToolkit")
    compile ihmc.getProjectDependency(":IHMCPerception")
    compile ihmc.getProjectDependency(":IHMCRoboticsToolkit")
    compile ihmc.getProjectDependency(":IHMCROSTools")

    compile ihmc.getProjectDependency(":IHMCWholeBodyController")
    compile ihmc.getProjectDependency(":ImageProcessing")
    compile ihmc.getProjectDependency(":RobotDataCommunication")
    compile ihmc.getProjectDependency(":RobotiqHandDrivers")
    //compile ihmc.getProjectDependency(":ROSJava")
    compile ihmc.getProjectDependency(":SDFLoader")
    compile ihmc.getProjectDependency(":SensorProcessing")
    compile ihmc.getProjectDependency(":SimulationConstructionSet")

	testCompile ihmc.getProjectDependency(":IHMCUnitTesting")
    testCompile ihmc.getProjectDependency(":CommonWalkingControlModules").sourceSets.test.output
    testCompile ihmc.getProjectDependency(":DarpaRoboticsChallenge").sourceSets.test.output
    testCompile ihmc.getProjectDependency(":IHMCCommunication").sourceSets.test.output
    testCompile ihmc.getProjectDependency(":IHMCHumanoidRobotics").sourceSets.test.output
	testCompile ihmc.getProjectDependency(":IHMCRoboticsToolkit").sourceSets.test.output
    testCompile ihmc.getProjectDependency(":IHMCWholeBodyController").sourceSets.test.output
    testCompile ihmc.getProjectDependency(":SensorProcessing").sourceSets.test.output
  }

apply plugin: 'application'

applicationName = "IHMCAtlasAPI"
mainClassName = "us.ihmc.atlas.AtlasROSAPINetworkProcessor"
applicationDefaultJvmArgs = ["-Xmx4g"]

jar {
    manifest {
        attributes(
                "Created-By": "IHMC Gradle Build Script",
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "IHMC",

                "Bundle-Name": project.name,
                "Bundle-Version": project.version,
                "Bundle-License": "${project.ext.licenseURL}",
                "Bundle-Vendor": "IHMC")
    }
}

startScripts {
    outputs.upToDateWhen { false }

    doLast {
        def simUnixScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01")
        simUnixScriptDemo01.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")
        simUnixScriptDemo01.setExecutable(true)

        def simWindowsScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01.bat")
        simWindowsScriptDemo01.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")

        def simUnixScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals")
        simUnixScriptFinals.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")
        simUnixScriptFinals.setExecutable(true)

        def simWindowsScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals.bat")
        simWindowsScriptFinals.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")

        def simUnixScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer")
        simUnixScriptVisualizer.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")
        simUnixScriptVisualizer.setExecutable(true)

        def simWindowsScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer.bat")
        simWindowsScriptVisualizer.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")

        def simUnixScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger")
        simUnixScriptLogger.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataCommunication.logger.YoVariableLoggerDispatcher")
        simUnixScriptLogger.setExecutable(true)

        def simWindowsScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger.bat")
        simWindowsScriptLogger.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataCommunication.logger.YoVariableLoggerDispatcher")

        def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCAtlasGazeboController")
        simUnixScriptGazebo.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasGazeboController").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.atlas.gazebo.AtlasGazeboControllerFactory")
        simUnixScriptGazebo.setExecutable(true)

    }
}

applicationDistribution.from(startScripts.outputDir) {
    into "bin"
}
