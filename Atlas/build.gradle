buildscript {
   repositories {
      maven { url = "https://repo.gradle.org/gradle/libs-releases-local" }
      maven { url "https://plugins.gradle.org/m2/" }
      mavenLocal()
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc:ihmc-build:0.4.13"
      classpath "org.gradle:gradle-kotlin-dsl:0.10.3"
   }
}
plugins {
   id 'application'
}
apply plugin: "us.ihmc.ihmc-build"

applicationName = "IHMCAtlasAPI"
mainClassName = "us.ihmc.atlas.AtlasROSAPINetworkProcessor"
applicationDefaultJvmArgs = ["-Xmx4g"]

ihmc.configureProjectForOpenRobotics(project)

dependencies {
   compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.5'
   compile group: 'us.ihmc', name: 'ihmc-yovariables', version: '0.1.0'
   compile group: 'org.georegression', name: 'georegression', version: '0.11'
   compile group: 'org.ddogleg', name: 'ddogleg', version: '0.7'
   compile group: 'org.apache.xmlgraphics', name: 'batik-dom', version: '1.7'
   compile group: 'org.apache.ant', name: 'ant', version: '1.9.0'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.ros.rosjava_core', name: 'rosjava', version: '0.2.1'
   compile group: 'org.ejml', name: 'core', version: '0.30'
   compile group: 'org.ejml', name: 'dense64', version: '0.30'
   compile group: 'org.boofcv', name: 'io', version: '0.24.1'
   compile group: 'org.boofcv', name: 'ip', version: '0.24.1'
   compile group: 'org.boofcv', name: 'geo', version: '0.24.1'
   compile group: 'org.boofcv', name: 'calibration', version: '0.24.1'
   compile group: 'org.boofcv', name: 'visualize', version: '0.24.1'
   compile group: 'org.ros.rosjava_bootstrap', name: 'message_generation', version: '0.2.1'
   compile group: 'com.esotericsoftware.kryo', name: 'kryo', version: '2.20'
   compile group: 'us.ihmc.thirdparty.jme', name: 'jme3-core', version: '3.1.0-internal4'
   compile group: 'com.github.wendykierp', name: 'JTransforms', version: '3.1'
   compile group: 'org.ros.rosjava_messages', name: 'sensor_msgs', version: '1.11.7'
   compile group: 'org.ros.rosjava_messages', name: 'multisense_ros', version: '3.4.2'
   compile group: 'us.ihmc.thirdparty.org.opencv', name: 'opencv', version: '3.2.0-170503'
   compile 'org.ros.rosjava_messages:geometry_msgs:1.11.9'
   compile "org.boofcv:recognition:0.24.1"
   compile group: 'us.ihmc', name: 'ihmc-commons', version: '0.11.0-alpha'
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-humanoid-behaviors", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "vicon", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "common-walking-control-modules", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-avatar-interfaces", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-jmonkey-engine-toolkit", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-humanoid-robotics", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-communication", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-java-toolkit", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-java-extensions", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-perception", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-robotics-toolkit", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-ros-tools", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-whole-body-controller", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-robot-data-logger", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "robotiq-hand-drivers", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "model-file-loader", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "sensor-processing", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "simulation-construction-set", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "simulation-construction-set-tools", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-graphics-description", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-robot-description", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-robot-models", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-simulation-toolkit", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-robot-data-visualizer", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-manipulation-planning", dependencyMode)
}

testDependencies {
   compile group: 'junit', name: 'junit', version: '4.11'
   compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.7'
   compile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'
   compile group: 'us.ihmc', name: 'ihmc-commons-testing', version: '0.11.0-alpha'
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-robotics-toolkit-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-java-extensions-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "common-walking-control-modules-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-avatar-interfaces-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-avatar-interfaces-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-humanoid-robotics-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "sensor-processing-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "ihmc-simulation-toolkit-test", dependencyMode)
   compile ihmc.getBuildVersion("us.ihmc", "simulation-construction-set-tools-test", dependencyMode)
}

startScripts {
   outputs.upToDateWhen { false }

   doLast {
      def simUnixScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01")
      simUnixScriptDemo01.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")
      simUnixScriptDemo01.setExecutable(true)

      def simWindowsScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01.bat")
      simWindowsScriptDemo01.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")

      def simUnixScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals")
      simUnixScriptFinals.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")
      simUnixScriptFinals.setExecutable(true)

      def simWindowsScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals.bat")
      simWindowsScriptFinals.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")

      def simUnixScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer")
      simUnixScriptVisualizer.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")
      simUnixScriptVisualizer.setExecutable(true)

      def simWindowsScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer.bat")
      simWindowsScriptVisualizer.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")

      def simUnixScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger")
      simUnixScriptLogger.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher")
      simUnixScriptLogger.setExecutable(true)

      def simWindowsScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger.bat")
      simWindowsScriptLogger.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher")

      def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCAtlasGazeboController")
      simUnixScriptGazebo.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasGazeboController").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.atlas.gazebo.AtlasGazeboControllerFactory")
      simUnixScriptGazebo.setExecutable(true)
   }
}

applicationDistribution.from(startScripts.outputDir) {
   into "bin"
}
