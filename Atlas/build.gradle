import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = '0.3.0-alpha'

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()

apply plugin: 'application'

applicationName = "IHMCAtlasAPI"
mainClassName = "us.ihmc.atlas.AtlasROSAPINetworkProcessor"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
    outputs.upToDateWhen { false }

    doLast {
        def simUnixScript = file(outputDir.canonicalPath + "/${applicationName}Simulator")
        simUnixScript.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasROSAPISimulator")
        simUnixScript.setExecutable(true)

        def simWindowsScript = file(outputDir.canonicalPath + "/${applicationName}Simulator.bat")
        simWindowsScript.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasROSAPISimulator")
    }
}

applicationDistribution.from(startScripts.outputDir) {
    into "bin"
}

applicationDistribution.from(file("GFEDefaultNetworkParameters.ini")) {
    rename "GFEDefaultNetworkParameters.ini", "IHMCNetworkParameters.ini"
	into "bin"
}

task gfeDevCompile(dependsOn:distTar) << {
    if(!project.hasProperty("catkinWorkspaceLocation"))
    {
        throw new TaskExecutionException(tasks.gfeDevCompile, new StopActionException("gfeDevCompile requires the project property catkinWorkspaceLocation to be set. Check your gradle.properties or set \"-PcatkinWorkspaceLocation=<absolute path>\" from the command line."))
    }

    if(catkinWorkspaceLocation.startsWith("~"))
    {
        catkinWorkspaceLocation = catkinWorkspaceLocation.replace("~", System.getProperty("user.home"))
    }

    String buildName = applicationName.toString() + "-" + version;
    java.nio.file.Path messagesLocation = Paths.get(project(':ROSJavaBootstrap').projectDir.absolutePath, "ROSMessagesAndServices", "ihmc_msgs", "msg")
    java.nio.file.Path catkinWorkspaceLocationPath = Paths.get("$catkinWorkspaceLocation")
    java.nio.file.Path ihmcMsgsLocation = catkinWorkspaceLocationPath.resolve("src").resolve("ihmc_ros").resolve("ihmc_sim")
    java.nio.file.Path archiveLocation = Paths.get(project.buildDir.absolutePath, "distributions", buildName + ".tar")

    if(!Files.exists(ihmcMsgsLocation))
    {
        throw new TaskExecutionException(tasks.gfeDevCompile, new StopActionException("ihmc_msgs not in catkin workspace \"src\" directory. Check out ihmc_msgs from BitBucket."))
    }

    copy {
        println "Copying ROS messages from ROSJavaBootstrop in to ihmc_msgs in catkin workspace"
        from messagesLocation.toAbsolutePath().toString()
        into ihmcMsgsLocation.resolve("msg").toAbsolutePath().toString()
        exclude { details -> !details.file.name.endsWith(".msg") }
    }

    copy {
        println "Expanding the distribution archive in to ihmc_msgs/scripts"
        from tarTree(archiveLocation.toAbsolutePath().toString())
        into ihmcMsgsLocation.resolve("bin").toAbsolutePath().toString()
    }
}

task pushBuild(type:Exec, dependsOn:distTar) {
    doLast {
        def userName = "${bitbucket_user}"
        def password = "${bitbucket_password}"
        def repoUrl = "/ihmcrobotics/ihmc_ros/downloads"
        def targetFile = "build/distributions/${applicationName}-${version}.tar"
    
        commandLine 'build_utilities/upload-to-bitbucket.sh', userName, password, repoUrl, targetFile
    }
}
