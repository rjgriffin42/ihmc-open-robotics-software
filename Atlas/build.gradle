import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.5"
    }
}
apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = '0.5.1-alpha'

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()

apply plugin: 'application'

applicationName = "IHMCAtlasAPI"
mainClassName = "us.ihmc.atlas.AtlasROSAPINetworkProcessor"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
    outputs.upToDateWhen { false }

    doLast {
        def simUnixScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01")
        simUnixScriptDemo01.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")
        simUnixScriptDemo01.setExecutable(true)

        def simWindowsScriptDemo01 = file(outputDir.canonicalPath + "/${applicationName}SimulatorDemo01.bat")
        simWindowsScriptDemo01.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasDemo01ROSAPISimulator")
    	
    	def simUnixScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals")
        simUnixScriptFinals.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")
        simUnixScriptFinals.setExecutable(true)

        def simWindowsScriptFinals = file(outputDir.canonicalPath + "/${applicationName}SimulatorFinals.bat")
        simWindowsScriptFinals.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCAtlasAPISimulator").replace("AtlasROSAPINetworkProcessor", "AtlasFinalsROSAPISimulator")

        def simUnixScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer")
        simUnixScriptVisualizer.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")
        simUnixScriptVisualizer.setExecutable(true)

        def simWindowsScriptVisualizer = file(outputDir.canonicalPath + "/IHMCRemoteAtlasVisualizer.bat")
        simWindowsScriptVisualizer.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCRemoteAtlasVisualizer").replace("AtlasROSAPINetworkProcessor", "RemoteAtlasVisualizer")

        def simUnixScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger")
        simUnixScriptLogger.text = unixScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataCommunication.logger.YoVariableLoggerDispatcher")
        simUnixScriptLogger.setExecutable(true)

        def simWindowsScriptLogger = file(outputDir.canonicalPath + "/IHMCLogger.bat")
        simWindowsScriptLogger.text = windowsScript.text.replace("IHMCAtlasAPI", "IHMCLogger").replace("us.ihmc.atlas.AtlasROSAPINetworkProcessor", "us.ihmc.robotDataCommunication.logger.YoVariableLoggerDispatcher")
    	
    }
}

applicationDistribution.from(startScripts.outputDir) {
    into "bin"
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync

task awsDeploySim(type: S3Sync, dependsOn: distTar) {
    description = "Push current API release to AWS S3"
    configFile "aws.properties"

    from "${buildDir}/distributions"
    into "ihmc/api_releases"
    
    keepFiles true

    doFirst{
        if(!project.hasProperty("awsAccessKey") || !project.hasProperty("awsSecretKey"))
        {
            throw new TaskExecutionException(tasks.tasks.awsDeploySim, new StopActionException("AWS credentials not set, you should store them safely and locally in your user's gradle.properties (defaults to \$HOME/.gradle/gradle.properties)"));
        }

        accessKey awsAccessKey
        secretKey awsSecretKey

        def verManifestFile = new File("${buildDir}/distributions/version")

        verManifestFile.text = version
    }
}

task gfeDevCompile(dependsOn:distTar) << {
    if(!project.hasProperty("ihmcRosPackageLocation"))
    {
        throw new TaskExecutionException(tasks.gfeDevCompile, new StopActionException("gfeDevCompile requires the project property ihmcRosPackageLocation to be set. Check your gradle.properties or set \"-PihmcRosPackageLocation=<absolute path>\" from the command line."))
    }

    if(ihmcRosPackageLocation.startsWith("~"))
    {
        ihmcRosPackageLocation = ihmcRosPackageLocation.replace("~", System.getProperty("user.home"))
    }

    String buildName = applicationName.toString() + "-" + version;
    java.nio.file.Path messagesLocation = Paths.get(project(':ROSJavaBootstrap').projectDir.absolutePath, "ROSMessagesAndServices", "ihmc_msgs", "msg")
    java.nio.file.Path ihmcRosPackageLocationPath = Paths.get("$ihmcRosPackageLocation")
    java.nio.file.Path ihmcMsgsLocation = ihmcRosPackageLocationPath.resolve("ihmc_msgs")
    java.nio.file.Path ihmcSimLocation = ihmcRosPackageLocationPath.resolve("ihmc_atlas")
    java.nio.file.Path archiveLocation = Paths.get(project.buildDir.absolutePath, "distributions", buildName + ".tar")

    if(!Files.exists(ihmcMsgsLocation))
    {
        throw new TaskExecutionException(tasks.gfeDevCompile, new StopActionException("ihmc_msgs not in ihmc_ros directory. Check out ihmc_ros from BitBucket."))
    }

    copy {
        println "Copying ROS messages from ROSJavaBootstrop in to ihmc_ros"
        from messagesLocation.toAbsolutePath().toString()
        into ihmcMsgsLocation.resolve("msg").toAbsolutePath().toString()
        exclude { details -> !details.file.name.endsWith(".msg") }
    }

    copy {
        println "Expanding the distribution archive in to ihmc_sim/scripts"
        from tarTree(archiveLocation.toAbsolutePath().toString())
        into ihmcSimLocation.toAbsolutePath().toString()
    }
}
