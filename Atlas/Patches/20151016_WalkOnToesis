### Eclipse Workspace Patch 1.0
#P DarpaRoboticsChallenge
Index: src/us/ihmc/darpaRoboticsChallenge/controllers/StraightLinePathType.java
===================================================================
--- src/us/ihmc/darpaRoboticsChallenge/controllers/StraightLinePathType.java	(revision 33138)
+++ src/us/ihmc/darpaRoboticsChallenge/controllers/StraightLinePathType.java	(working copy)
@@ -1,5 +1,7 @@
 package us.ihmc.darpaRoboticsChallenge.controllers;
 
+import us.ihmc.tools.io.printing.PrintTools;
+
 // FIXME Extract these constant to be robot agnostic.
 public enum StraightLinePathType
 {
@@ -139,6 +141,7 @@
 
          case STRAIGHT :
             length = stepLengthMultiplier * STRAIGHT_STEP_LENGTH;
+            System.out.println("Desired step length: " + length);
 
             break;
 
#P Atlas
Index: src/us/ihmc/atlas/parameters/AtlasWalkingControllerParameters.java
===================================================================
--- src/us/ihmc/atlas/parameters/AtlasWalkingControllerParameters.java	(revision 33188)
+++ src/us/ihmc/atlas/parameters/AtlasWalkingControllerParameters.java	(working copy)
@@ -104,7 +104,7 @@
    @Override
    public boolean doToeOffIfPossibleInSingleSupport()
    {
-      return false;
+      return true;
    }
 
    @Override
@@ -734,13 +734,13 @@
    @Override
    public double getDefaultTransferTime()
    {
-      return (target == DRCRobotModel.RobotTarget.REAL_ROBOT) ? 0.8 : 0.25;
+      return (target == DRCRobotModel.RobotTarget.REAL_ROBOT) ? 0.15 : 0.25;
    }
 
    @Override
    public double getDefaultSwingTime()
    {
-      return (target == DRCRobotModel.RobotTarget.REAL_ROBOT) ? 1.2 : 0.60;
+      return (target == DRCRobotModel.RobotTarget.REAL_ROBOT) ? 1.0 : 0.60;
    }
 
    /** @inheritDoc */
Index: src/us/ihmc/atlas/parameters/AtlasCapturePointPlannerParameters.java
===================================================================
--- src/us/ihmc/atlas/parameters/AtlasCapturePointPlannerParameters.java	(revision 33188)
+++ src/us/ihmc/atlas/parameters/AtlasCapturePointPlannerParameters.java	(working copy)
@@ -34,7 +34,7 @@
    @Override
    public double getAdditionalTimeForSingleSupport()
    {
-      return 0.1;
+      return 0.0;
    }
 
    /** {@inheritDoc} */
@@ -119,7 +119,7 @@
    @Override
    public double getEntryCMPInsideOffset()
    {
-      return -0.005; //0.006;
+      return -0.01; //0.006;
    }
 
    /** {@inheritDoc} */
@@ -126,7 +126,7 @@
    @Override
    public double getExitCMPInsideOffset()
    {
-      return 0.025;
+      return 0.01;
    }
 
    /** {@inheritDoc} */
@@ -196,7 +196,7 @@
    @Override
    public double getMaxExitCMPForwardOffset()
    {
-      return 0.08;
+      return 0.15;
    }
 
    /** {@inheritDoc} */
@@ -210,7 +210,7 @@
    @Override
    public double getCMPSafeDistanceAwayFromSupportEdges()
    {
-      return 0.01;
+      return 0.0;
    }
 
    /** {@inheritDoc} */
@@ -259,6 +259,6 @@
    @Override
    public double getMinTimeToSpendOnExitCMPInSingleSupport()
    {
-      return 0.0;
+      return 0.2;
    }
 }
#P CommonWalkingControlModules
Index: src/us/ihmc/commonWalkingControlModules/trajectories/LookAheadCoMHeightTrajectoryGenerator.java
===================================================================
--- src/us/ihmc/commonWalkingControlModules/trajectories/LookAheadCoMHeightTrajectoryGenerator.java	(revision 33138)
+++ src/us/ihmc/commonWalkingControlModules/trajectories/LookAheadCoMHeightTrajectoryGenerator.java	(working copy)
@@ -441,20 +441,22 @@
       d0Min.setY(findMinimumDoubleSupportHeight(s0.getX(), sF.getX(), d0.getX(), footHeight0, footHeight1));
       d0Nom.setY(findNominalDoubleSupportHeight(s0.getX(), sF.getX(), d0.getX(), footHeight0, footHeight1));
 
-      if ((walkOnTheEdgesManager != null) && walkOnTheEdgesManager.willLandOnToes())
+      double extraD0FootHeight1 = 0.0;
+      double extraD0FootHeight0 = 0.0;
+      boolean willDoToeOff = walkOnTheEdgesManager.willDoToeOff(transferToAndNextFootstepsData);
+      if (walkOnTheEdgesManager != null)
       {
-         d0Max.setY(findMaximumDoubleSupportHeight(s0.getX(), sF.getX(), d0.getX(), footHeight0, footHeight1 + extraCoMMaxHeightWithToes));
+    	  extraD0FootHeight1 = walkOnTheEdgesManager.willLandOnToes() ? extraCoMMaxHeightWithToes : 0.0;
+    	  boolean willDoToeOffInSingleSupport = willDoToeOff && walkOnTheEdgesManager.doToeOffIfPossibleInSingleSupport();
+    	  extraD0FootHeight0 = willDoToeOffInSingleSupport ? extraCoMMaxHeightWithToes : 0.0;
       }
-      else
-      {
-         d0Max.setY(findMaximumDoubleSupportHeight(s0.getX(), sF.getX(), d0.getX(), footHeight0, footHeight1));
-      }
 
+      d0Max.setY(findMaximumDoubleSupportHeight(s0.getX(), sF.getX(), d0.getX(), footHeight0 + extraD0FootHeight0, footHeight1 + extraD0FootHeight1));
+
       dFMin.setY(findMinimumDoubleSupportHeight(s0.getX(), sF.getX(), dF.getX(), footHeight0, footHeight1));
       dFNom.setY(findNominalDoubleSupportHeight(s0.getX(), sF.getX(), dF.getX(), footHeight0, footHeight1));
 
-      if ((walkOnTheEdgesManager != null)
-              && walkOnTheEdgesManager.willDoToeOff(transferToAndNextFootstepsData))
+      if ((walkOnTheEdgesManager != null) && willDoToeOff)
       {
          dFMax.setY(findMaximumDoubleSupportHeight(s0.getX(), sF.getX(), dF.getX(), footHeight0 + extraCoMMaxHeightWithToes, footHeight1));
       }
@@ -660,8 +662,8 @@
       double length = projectionSegment.length();
 
       double xS0 = 0.0;
-      double xD0 = doubleSupportPercentageIn.getDoubleValue() * length;
-      double xDF = (1.0 - doubleSupportPercentageIn.getDoubleValue()) * length;
+      double xD0 = doubleSupportPercentageIn.getDoubleValue() * length; // 0.65 * length; // 
+      double xDF = (1.0 - doubleSupportPercentageIn.getDoubleValue()) * length; // 0.8 * length; // 
       double xSF = length;
 
       double xSNext = Double.NaN;
Index: src/us/ihmc/commonWalkingControlModules/instantaneousCapturePoint/ReferenceCentroidalMomentumPivotLocationsCalculator.java
===================================================================
--- src/us/ihmc/commonWalkingControlModules/instantaneousCapturePoint/ReferenceCentroidalMomentumPivotLocationsCalculator.java	(revision 33138)
+++ src/us/ihmc/commonWalkingControlModules/instantaneousCapturePoint/ReferenceCentroidalMomentumPivotLocationsCalculator.java	(working copy)
@@ -554,7 +554,7 @@
    {
       // Set x to have the CMP slightly inside the support polygon
       exitCMPToPack.setToZero(tempSupportPolygon.getReferenceFrame());
-      exitCMPToPack.setX(tempSupportPolygon.getMaxX() - 1.6e-2);
+      exitCMPToPack.setX(tempSupportPolygon.getMaxX() - 0.0 * 1.6e-2);
       exitCMPToPack.setY(tempSupportPolygon.getCentroid().getY());
 
       // Then constrain the computed CMP to be inside a safe support region
