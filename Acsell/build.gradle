plugins {
	id 'org.hidetake.ssh' version '1.1.3'
    id 'us.ihmc.gradle.ihmc-build' version '0.0.14'
}


if(!rootProject.name.equals('IHMCOpenRoboticsSoftware')) { evaluationDependsOn(':IHMCOpenRoboticsSoftware') }

sourceCompatibility = 1.7

version = "${getOpenRoboticsSoftwareProject().version}"
project.ext.fullVersion = "${getOpenRoboticsSoftwareProject().ext.fullVersion}"
project.ext.vcsUrl = "${getOpenRoboticsSoftwareProject().ext.vcsUrl}"
project.ext.licenseURL = "http://gnu.org/licenses/gpl-3.0.txt"
project.ext.licenseName = "GPLv3"
project.ext.bintrayLicenseName = "GPL-3.0"


repositories ihmc.ihmcDefaultArtifactProxies()

repositories {
	maven {
		url "https://bengal.ihmc.us/nexus/content/repositories/thirdparty/"
	}
}

repositories {
   mavenLocal()
   jcenter()
   mavenCentral()
}

def strings = ['ihmc', 'robotics']
ihmc.configureForIHMCOpenSourceBintrayPublish(false, "mavenJava", "ihmc-robotics-releases", strings)

evaluationDependsOn(ihmc.getProjectDependencyGradlePath("DarpaRoboticsChallenge"))

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.11'

	compile group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'
	compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.2'

	compile ihmc.getProjectDependency(":CommonWalkingControlModules")
	//testCompile ihmc.getProjectDependency(":CommonWalkingControlModules").sourceSets.test.output
	compile ihmc.getProjectDependency(":DarpaRoboticsChallenge")
	testCompile ihmc.getProjectDependency(":DarpaRoboticsChallenge").sourceSets.test.output
	compile ihmc.getProjectDependency(":Graphics3DAdapter")

	compile ihmc.getProjectDependency(":SDFLoader")
	compile ihmc.getProjectDependency(":SensorProcessing")
	compile ihmc.getProjectDependency(":SimulationConstructionSet")
	compile ihmc.getProjectDependency(":RobotDataCommunication")
	compile ihmc.getProjectDependency(":IHMCHumanoidBehaviors")
    compile ihmc.getProjectDependency(":IHMCPerception")
    compile ihmc.getProjectDependency(":IHMCWholeBodyController")
    compile ihmc.getProjectDependency(":IHMCROSTools")
	compile ihmc.getProjectDependency(":IHMCJavaToolkit")
	compile ihmc.getProjectDependency(":IHMCRoboticsToolkit")
    testCompile ihmc.getProjectDependency(":IHMCUnitTesting")
}

remotes {
	stepprController
			{
				host = '10.66.171.20' //CPU1
				// Set the username and password in ~/.gradle/gradle.properties.
				user = project.hasProperty('steppr_username') ? "${steppr_username}" : "invalid"
				password = project.hasProperty('steppr_password') ? "${steppr_password}" : "invalid"
				knownHosts = allowAnyHosts
			}
	wandererController
			{
				host = '10.66.171.21'
				// Set the username and password in ~/.gradle/gradle.properties.
				user = project.hasProperty('wanderer_username') ? "${wanderer_username}" : "invalid"
				password = project.hasProperty('wanderer_password') ? "${wanderer_password}" : "invalid"
				knownHosts = allowAnyHosts
			}
}

jar {
	List depend = []
	configurations.runtime.each {
		if (!it.name.contains("IHMCHumanoidOperatorInterface")) {
			depend.add('lib/' + it.name)
		}
	}
	manifest {
		attributes(
				'Created-By': 'IHMC Gradle Build Script',
				'Class-Path': depend.join(' '),
				"Implementation-Title": project.name,
				"Implementation-Version": project.version,
				"Implementation-Vendor": "IHMC",

				"Bundle-Name": project.name,
				"Bundle-Version": project.version,
				"Bundle-License": "${project.ext.licenseURL}",
				"Bundle-Vendor": "IHMC")
	}
}

task deploy(dependsOn: assemble) << {

	def rep;
	def scriptDir;
	def directory;

	if (!project.hasProperty("robot")) {
		throw new GradleException("No robot passed in. Pass in -Probot=[robot].");
	} else if ("$robot" == "steppr") {

		if (!project.hasProperty('steppr_username') || !project.hasProperty('steppr_password')) {
			throw new GradleException("Please set stepper_username and steppr_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
		}

		rep = remotes.stepprController
		scriptDir = new File("scripts/steppr");
		directory = "steppr"
	} else if ("$robot" == "wanderer") {
		if (!project.hasProperty('wanderer_username') || !project.hasProperty('wanderer_password')) {
			throw new GradleException("Please set wanderer_username and wanderer_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
		}

		rep = remotes.wandererController
		scriptDir = new File("scripts/wanderer");
		directory = "wanderer"
	} else {
		throw new GradleException("Invalid robot \"$robot\" passed in. Valid options are \"steppr\" and \"wanderer\"");
	}

	println "Trying ssh"
	ssh.run {
		session(rep) {
			execute("mkdir -p " + directory + "/lib")
			println "Adding Jars"
			configurations.runtime.each
					{
						put it, directory + '/lib'
					}

            put jar.archivePath, directory + '/AcsellController.jar'

            def scriptDirCollection = files { scriptDir.listFiles() }
			put scriptDirCollection, directory

            scriptDirCollection.each {
                execute 'chmod 777 ' + directory + '/' + it.name
			}
		}
	}
}
