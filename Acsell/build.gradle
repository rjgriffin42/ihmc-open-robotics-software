apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = '1.0'

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()

buildscript {
    repositories {
        jcenter()

        maven{
            url "https://bengal.ihmc.us/nexus/content/repositories/central/"
        }
    }
    dependencies {
        classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.5"
        classpath 'org.hidetake:gradle-ssh-plugin:0.3.12'
    }
}


apply plugin: 'org.hidetake.ssh'

remotes
        {
            stepprController
                    {
                        host = '10.66.171.20' //CPU1
                        user = 'root'
                        password = 'unknownpw'
                        knownHosts = allowAnyHosts
                    }
            wandererController
                    {
					    host='10.66.171.21'
                        user = 'unknownid'
                        password = 'unknownpw'
                        knownHosts = allowAnyHosts
                    }
        }


jar {
	List depend = []
	configurations.runtime.each {
	if(!it.name.contains("IHMCHumanoidOperatorInterface"))
		{
			depend.add('lib/' + it.name)
		}
	}
	manifest {		
		attributes('Created-By': 'IHMC Gradle Build Script', 'Implementation-Vendor': 'IHMC', 'Class-Path': depend.join(' '))
	}
}

task deploy(dependsOn: assemble) {

	def rep;
	def scriptDir;
	def directory;
	
	if(!project.hasProperty("robot")) {
		throw new GradleException("No robot passed in. Pass in -Probot=[robot].");
	}
	else if("$robot" == "steppr") {
		rep = remotes.stepprController
		scriptDir = new File("scripts/steppr");
		directory = "steppr"
	}
	else if("$robot" == "wanderer") {
		rep = remotes.wandererController
		scriptDir = new File("scripts/wanderer");
		directory = "wanderer"
	}
	else {
		throw new GradleException("Invalid robot \"$robot\" passed in. Valid options are \"steppr\" and \"wanderer\"");
	}

	doLast{
	sshexec {
            session(rep)
                    {
                    execute("mkdir -p " + directory + "/lib")

                        configurations.runtime.each
                                {
                                    put it, directory + '/lib'
                                }

                        put jar.archivePath, directory + '/AcsellController.jar'

                        def scriptDirCollection = files { scriptDir.listFiles() }
                        put scriptDirCollection, directory

                        scriptDirCollection.each
                                {
                                    execute 'chmod 777 ' + directory + '/' + it.name
                                }
                    }
            }

	}
}