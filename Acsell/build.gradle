apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = '1.0'

configurations {
	sshAntTask
}

buildscript {
  repositories {
	  maven{
		  url "https://bengal.ihmc.us/nexus/content/repositories/central/"
	  }
  }  
  dependencies {
      classpath "org.apache.maven.wagon:wagon-ssh:2.7" 
  }
}

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()


jar {
	List depend = []
	configurations.runtime.each {
	if(!it.name.contains("IHMCHumanoidOperatorInterface"))
		{
			depend.add('lib/' + it.name)
		}
	}
	manifest {		
		attributes('Created-By': 'IHMC Gradle Build Script', 'Implementation-Vendor': 'IHMC', 'Class-Path': depend.join(' '))
	}
}

task deploy(dependsOn: assemble) {

	def rep;
	def scriptDir;
	if(!project.hasProperty("robot")) {
		throw new GradleException("No robot passed in. Pass in -Probot=[robot].");
	}
	else if("$robot" == "steppr") {
		rep = new org.apache.maven.wagon.repository.Repository("steppr", "scp://10.66.171.20/root/acsell")
		scriptDir = new File("scripts/steppr");
	}
	else if("$robot" == "wanderer") {
		rep = new org.apache.maven.wagon.repository.Repository("wanderer", "scp://10.66.171.21/root/acsell")
		scriptDir = new File("scripts/wanderer");
	}
	else {
		throw new GradleException("Invalid robot \"$robot\" passed in. Valid options are \"steppr\" and \"wanderer\"");
	}
	
	def auth = new org.apache.maven.wagon.authentication.AuthenticationInfo() 
	auth.userName = 'root'
	auth.password = 'unknownpw'
	def hosts = new org.apache.maven.wagon.providers.ssh.knownhost.NullKnownHostProvider()
	hosts.setHostKeyChecking("no")
	
		
	doLast {
		def wagon = new org.apache.maven.wagon.providers.ssh.jsch.ScpWagon() 
		wagon.setKnownHostsProvider(hosts)
		wagon.connect(rep, auth)
		
		configurations.runtime.each 
		{
			wagon.put(it, "lib/" + it.name)
		}
		
		
		def scriptDirCollection = files { scriptDir.listFiles() }
		scriptDirCollection.each
		{
			wagon.put(it, it.name)
		}

		def configDir = new File("Configurations")
		def configFileCollection = files { configDir.listFiles() }
		configFileCollection.each
		{
			if(it.name.contains(".ini"))
			{
				
				System.out.println(it.name)
				wagon.put(it, "Configurations/" + it.name)
			}
		}
		def networkParams = new File("IHMCNetworkParameters.ini")
		wagon.put(networkParams, networkParams.name)
		
		wagon.put(jar.archivePath, "AcsellController.jar")
	}
	 
}