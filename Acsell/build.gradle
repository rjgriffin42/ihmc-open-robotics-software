plugins {
  id 'org.hidetake.ssh' version '1.1.3'
}

apply plugin: 'java'
apply from: 'gradleScripts/util.gradle'

sourceCompatibility = 1.7
version = '1.0'

setupDefaultDirectoryStructure()

setupDefaultRepositories()

setupProjectSpecificDependencies()



remotes {
	stepprController
   	{
    	host = '10.66.171.20' //CPU1
        user = 'root'
        password = 'unknownpw'
        knownHosts = allowAnyHosts
	}
	wandererController
    {
		host = '10.66.171.21'
    	user = 'root'
		password = 'unknownpw'
		knownHosts = allowAnyHosts
    }
}

jar {
	List depend = []
	configurations.runtime.each {
		if(!it.name.contains("IHMCHumanoidOperatorInterface")){
			depend.add('lib/' + it.name)
		}
	}
   manifest {
      attributes(
            'Created-By': 'IHMC Gradle Build Script',
            'Class-Path': depend.join(' '),
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "IHMC",

            "Bundle-Name": project.name,
            "Bundle-Version": project.version,
            "Bundle-Description": "IHMCRoboticsToolKit contains useful fuctions to create robot controllers",
            "Bundle-License": "https://gnu.org/licenses/gpl-3.0.txt",
            "Bundle-Vendor": "IHMC")
   }
}

task deploy(dependsOn: assemble) << {

	def rep;
	def scriptDir;
	def directory;
	
	if(!project.hasProperty("robot")) {
		throw new GradleException("No robot passed in. Pass in -Probot=[robot].");
	}
	else if("$robot" == "steppr") {
		rep = remotes.stepprController
		scriptDir = new File("scripts/steppr");
		directory = "steppr"
	}
	else if("$robot" == "wanderer") {
		rep = remotes.wandererController
		scriptDir = new File("scripts/wanderer");
		directory = "wanderer"
	}
	else {
		throw new GradleException("Invalid robot \"$robot\" passed in. Valid options are \"steppr\" and \"wanderer\"");
	}
	
	println "Trying ssh"
	ssh.run {
		session(rep) {
			execute("mkdir -p " + directory + "/lib")
			println "Adding Jars"
			configurations.runtime.each
            {
            	put it, directory + '/lib'
        	}

            put jar.archivePath, directory + '/AcsellController.jar'

            def scriptDirCollection = files { scriptDir.listFiles() }
	        put scriptDirCollection, directory

            scriptDirCollection.each {
                execute 'chmod 777 ' + directory + '/' + it.name
			}
		}
	}
}