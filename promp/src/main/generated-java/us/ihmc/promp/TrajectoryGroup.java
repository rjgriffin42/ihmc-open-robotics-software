// Targeted by JavaCPP version 1.5.7: DO NOT EDIT THIS FILE

package us.ihmc.promp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static us.ihmc.promp.global.promp.*;


    /**
     * \brief      Class for handling data from multiple trajectories.
     * Data from each trajectory should be stored in an individual file, 
     * files can be generated from serializer or be in .csv format.
     * Each column within .csv file represents a trajectory.
     * All .csv files must have trajectories(columns) in the same sequence (column-wise)
     */
    @Namespace("promp") @Properties(inherit = us.ihmc.promp.presets.PrompInfoMapper.class)
public class TrajectoryGroup extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public TrajectoryGroup() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public TrajectoryGroup(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public TrajectoryGroup(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public TrajectoryGroup position(long position) {
            return (TrajectoryGroup)super.position(position);
        }
        @Override public TrajectoryGroup getPointer(long i) {
            return new TrajectoryGroup((Pointer)this).offsetAddress(i);
        }
    
        
        /**
         *  \brief default constructor: create an empty trajectory group
         */

        /**
         *  \brief    load trajectories from list of files (formatted as generated from io/serializer). 
         *	\param	files of files.
         *	\param	index list of indexes representing dofs to keep.
         */

        /**
         *  \brief    load trajectories from list of .csv files. 
         *	\param	files of files.
         *	\param	index list of indexes representing dofs to keep.
         *	\param	sep values separator.
         *	\param	skip_header if true skip first line.
         */

        /**
         *  \brief    load trajectories from list of .csv files. 
         *	\param	files of files.
         *	\param	cols list of columns (dofs) to keep.
         *	\param	sep values separator.
         */

        /**
         *   \brief    Normalize all trajectories to the mean length (number of timesteps)
         */

        /**
         *  \brief     Normalize all trajectories to the same desired length
         *	\param	len desired length
         */
        

        /**
         *   \brief    standardize each dof among the trajectories
         */

        /**
         * \brief	return the vector of trajectories
         */
        public native @Const @ByRef TrajectoryVector trajectories();
    }
