buildscript {
   repositories {
      maven {
         url "http://dl.bintray.com/ihmcrobotics/maven-release"
      }
   }
   dependencies {
      classpath group: 'us.ihmc', name: 'IHMCPubSubGenerator', version: '0.3.2'
   }
}

buildscript {
   repositories {
      maven { url = "https://repo.gradle.org/gradle/libs-releases-local" }
      maven { url "https://plugins.gradle.org/m2/" }
      mavenLocal()
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc:ihmc-build:0.4.17"
      classpath "org.gradle:gradle-kotlin-dsl:0.10.3"
   }
}
plugins {
   id "org.hidetake.ssh" version "2.9.0"
   id "application"
}
apply plugin: "us.ihmc.ihmc-build"

ihmc.configureProjectForOpenRobotics(project)

sourceSets.main.java.srcDirs += ['generated-src']

mainDependencies {
   compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.5'
   compile group: 'us.ihmc', name: 'ihmc-yovariables', version: '0.1.0'
   compile group: 'com.google.protobuf', name: 'protobuf-java', version: '2.6.1'
   compile group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
   compile group: 'com.google.guava', name: 'guava', version: '18.0'
   compile group: 'us.ihmc', name: 'IHMCVideoCodecs', version: '2.1.2'
   compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.8'
   compile group: 'us.ihmc', name: 'IHMCJavaDecklinkCapture', version: '0.2'
   compile group: 'commons-io', name: 'commons-io', version: '2.4'
   compile group: 'org.tukaani', name: 'xz', version: '1.5'
   compile group: 'us.ihmc', name: 'IHMCPubSub', version: '0.3.4.1'
   compile group: 'us.ihmc', name: 'IHMCPubSubSerializersExtra', version: '0.3'
   compile group: 'org.xerial.snappy', name: 'snappy-java', version: '1.1.1-M1'
   compile group: 'net.jpountz.lz4', name: 'lz4', version: '1.3.0'
   compile group: 'us.ihmc', name: 'ihmc-commons', version: '0.11.0-alpha'
   compile group: "us.ihmc", name: "model-file-loader", version: dependencyMode
   compile group: "us.ihmc", name: "ihmc-java-extensions", version: dependencyMode
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit", version: dependencyMode
   compile group: "us.ihmc", name: "ihmc-graphics-description", version: dependencyMode
   compile group: "us.ihmc", name: "ihmc-robot-description", version: dependencyMode
}

testDependencies {
   compile group: 'junit', name: 'junit', version: '4.11'
   compile group: 'us.ihmc', name: 'ihmc-commons-testing', version: '0.11.0-alpha'
}

mainClassName = hasProperty('mainClass') ? mainClass : "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher"

//task loggerStartScripts(type: CreateStartScripts) {
//   outputDir = file("build/scripts")
//   mainClassName = "us.ihmc.robotDataLogger.logger.YoVariableLoggerDispatcher"
//   applicationName = "IHMCLogger"
//   classpath = project.configurations.runtime + jar.outputs.files
//}
//
//task compileIDL(type: us.ihmc.idl.generator.IDLGeneratorTask) {
//   idlFiles = fileTree(dir: 'idl')
//   includeDirs = files(".")
//   targetDirectory = file("generated-src")
//   packagePrefix = ""
//}
//
//compileJava.dependsOn compileIDL
//
//distributions {
//   logger {
//      baseName = "IHMCLogger"
//      contents {
//         into('lib') {
//            from project.configurations.runtime + jar.outputs.files
//         }
//
//         into('bin') {
//            from loggerStartScripts
//            include "IHMCLogger*"
//         }
//      }
//   }
//}
//
//task setupDeployLoggerRemote << {
//   def deployLoggerUserValue = project.hasProperty("deployLoggerUser") ? project.deployLoggerUser : "invalid"
//   def deployLoggerPasswordValue = project.hasProperty("deployLoggerPassword") ? project.deployLoggerPassword : "invalid"
//   def deployLoggerHostValue = project.hasProperty("deployLoggerHost") ? project.deployLoggerHost : "invalid"
//
//   remotes.create('deployLoggerTarget') {
//      host = deployLoggerHostValue
//      user = deployLoggerUserValue
//      password = deployLoggerPasswordValue
//      knownHosts = allowAnyHosts
//   }
//}
//
//task deployLogger(dependsOn: [loggerDistTar, setupDeployLoggerRemote]) << {
//   ssh.run {
//      session(remotes.deployLoggerTarget) {
//         project.logger.lifecycle("Copying Logger distribution tarball to remote host")
//         def distTarFile = loggerDistTar.outputs.files.singleFile
//         put from: distTarFile, into: "."
//
//         project.logger.lifecycle("Untarring distribution on remote host")
//         execute "tar xf ./${distTarFile.name}"
//         project.logger.lifecycle("Removing tarball from remote host")
//         execute "rm -f ./${distTarFile.name}"
//         project.logger.lifecycle("Moving Logger distribution in to place")
//         execute "mv ./${distTarFile.name.replace(".tar", "")} IHMCLogger"
//         project.logger.lifecycle("Logger deployment to remote host complete!")
//      }
//   }
//}
//
//task checkThatDistributionDoesntAlreadyExist(type: Exec) {
//   def distTarFile = loggerDistTar.outputs.files.singleFile
//   workingDir project.projectDir
//   executable 'curl'
//   args = ["--write-out", "%{http_code}", "--silent", "--output", "/dev/null", "--head", "https://dl.bintray.com/ihmcrobotics/distributions/${distTarFile.name}"]
//   standardOutput = new ByteArrayOutputStream();
//
//   doLast {
//      execResult.assertNormalExitValue()
//      def output = standardOutput.toString()
//      if (output.equals("200"))
//      {
//         throw new GradleException("Distribution ${distTarFile.name} already exists on Bintray. Distributions versions should not be overwritten. Did you mean to release a new version or hotfix?")
//      }
//   }
//}
//
//task publishLoggerDistributionToBintray(type: Exec, dependsOn: [checkThatDistributionDoesntAlreadyExist, loggerDistTar]) {
//   def distTarFile = loggerDistTar.outputs.files.singleFile
//   def user = project.hasProperty("bintray_user") ? project.bintray_user : "invalid"
//   def key = project.hasProperty("bintray_key") ? project.bintray_key : "invalid"
//
//   workingDir project.projectDir
//   executable 'curl'
//   args = ["--write-out", "%{http_code}", "--silent", "--output", "/dev/null", "-T", distTarFile.canonicalPath, "-u${user}:${key}", "https://api.bintray.com/content/ihmcrobotics/distributions/IHMCLogger/${project.version}/${distTarFile.name}?publish=1"]
//   standardOutput = new ByteArrayOutputStream();
//
//   doLast {
//      execResult.assertNormalExitValue()
//      def output = standardOutput.toString()
//      if (!output.equals("201"))
//      {
//         throw new GradleException("Upload failed! HTTP Response code: ${output}.")
//      }
//   }
//}