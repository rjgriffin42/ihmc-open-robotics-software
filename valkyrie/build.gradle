buildscript {
   repositories {
      maven { url "https://plugins.gradle.org/m2/" }
      mavenLocal()
   }
   dependencies {
      classpath "gradle.plugin.us.ihmc:ihmc-build:0.7.4"
   }
}
plugins {
   id 'org.hidetake.ssh' version '2.9.0'
   id 'org.ajoberstar.grgit' version '1.7.2'
   id 'application'
}
apply plugin: "us.ihmc.ihmc-build"

ihmc {
   loadProductProperties("../product.properties")
   
   configureDependencyResolution()
   configurePublications()
}

testSuites {
   def prefix = "LIBS-IHMCOPENROBOTICSSOFTWARE"
   bambooPlanKeys = [prefix + "FAST", prefix + "INDEVELOPMENT", prefix + "UI", prefix + "FLAKY", prefix + "VIDEO"]
   disableBambooConfigurationCheck = true
}

mainDependencies {
   compile group: 'us.ihmc', name: 'euclid-core', version: '0.4.6'
   compile group: 'us.ihmc', name: 'ihmc-yovariables', version: '0.2.2'
   compile group: 'com.martiansoftware', name: 'jsap', version: '2.1'
   compile group: 'org.yaml', name: 'snakeyaml', version: '1.17' //1.11
   compile group: 'org.ejml', name: 'core', version: '0.30'
   compile group: 'org.ejml', name: 'simple', version: '0.30'
   compile group: 'org.ejml', name: 'dense64', version: '0.30'
   compile group: 'com.esotericsoftware.minlog', name: 'minlog', version: '1.2'
   compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
   compile group: 'us.ihmc.thirdparty.jinput', name: 'jinput', version: '160414'
   compile group: 'us.ihmc.thirdparty.jme', name: 'jme3-core', version: '3.1.0-internal4'
   compile group: 'org.ros.rosjava_bootstrap', name: 'message_generation', version: '0.2.1'
   compile group: 'org.ros.rosjava_messages', name: 'std_msgs', version: '0.5.9'
   compile group: 'us.ihmc', name: 'IHMCRealtime', version: '1.1.8'
   compile group: 'us.ihmc', name: 'IHMCRosControl', version: '0.5.0', changing: true
   compile group: 'us.ihmc', name: 'ihmc-commons', version: '0.11.2'
   compile group: "us.ihmc", name: "ihmc-communication", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-humanoid-robotics", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-system-identification", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-state-estimation", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-common-walking-control-modules", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-avatar-interfaces", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-jmonkey-engine-toolkit", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-ros-tools", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-robot-data-logger", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-model-file-loader", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-sensor-processing", version: groupDependencyVersion
   compile group: "us.ihmc", name: "simulation-construction-set", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-perception", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-whole-body-controller", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-java-toolkit", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-java-extensions", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-graphics-description", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-robot-description", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-robot-models", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-robot-data-visualizer", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-simulation-toolkit", version: groupDependencyVersion
}

testDependencies {
   compile group: 'junit', name: 'junit', version: '4.11'
   compile group: 'us.ihmc', name: 'ihmc-continuous-integration-framework', version: '0.9.4'
   compile group: 'us.ihmc', name: 'ihmc-commons-testing', version: '0.11.2'
   compile group: "us.ihmc", name: "ihmc-robotics-toolkit-test", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-java-extensions-test", version: groupDependencyVersion
   compile group: "us.ihmc", name: "ihmc-avatar-interfaces-test", version: groupDependencyVersion
}

applicationName = "IHMCValkyrieAPI"
mainClassName = "us.ihmc.valkyrie.ValkyrieROSAPISimulator"
applicationDefaultJvmArgs = ["-Xmx4g"]

startScripts {
   outputs.upToDateWhen { false }

   doLast {
      def simUnixScriptGazebo = file(outputDir.canonicalPath + "/IHMCValkyrieGazeboController")
      simUnixScriptGazebo.text = unixScript.text.replace("IHMCValkyrieAPI", "IHMCValkyrieGazeboController").replace("us.ihmc.valkyrie.ValkyrieROSAPISimulator", "us.ihmc.valkyrie.gazebo.ValkyrieGazeboControllerFactory")
      simUnixScriptGazebo.setExecutable(true)
   }
}

applicationDistribution.from(startScripts.outputDir) {
   into "bin"
}

remotes {
   valkyrieRealtimeComputer {
      host = project.hasProperty('valkyrie_link_ip') ? "${valkyrie_link_ip}" : "invalid"

      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('valkyrie_realtime_username') ? "${valkyrie_realtime_username}" : "invalid"
      password = project.hasProperty('valkyrie_realtime_password') ? "${valkyrie_realtime_password}" : "invalid"

      knownHosts = allowAnyHosts
   }

   valkyrieNonRealtimeComputer {
      host = project.hasProperty('valkyrie_zelda_ip') ? "${valkyrie_zelda_ip}" : "invalid"

      // Set the username and password in ~/.gradle/gradle.properties.
      user = project.hasProperty('valkyrie_realtime_username') ? "${valkyrie_realtime_username}" : "invalid"
      password = project.hasProperty('valkyrie_realtime_password') ? "${valkyrie_realtime_password}" : "invalid"

      knownHosts = allowAnyHosts
   }
}

//jar {
////   List depend = []
////   configurations.runtime.each {
////      if (!it.name.contains("IHMCHumanoidOperatorInterface"))
////      {
////         depend.add('lib/' + it.name)
////      }
////   }
//
//   manifest {
//      attributes(
//            "Created-By": "IHMC Gradle Build Script",
//            "Implementation-Title": project.name,
//            "Implementation-Version": project.version,
//            "Implementation-Vendor": "IHMC",
//
//            "Bundle-Name": project.name,
//            "Bundle-Version": project.version,
//            "Bundle-License": "${project.ext.licenseURL}",
//            "Bundle-Vendor": "IHMC",
//            //'Class-Path': depend.join(' '))
//      )
//   }
//}

task deployLocal(dependsOn: jar) {
   def directory = 'valkyrie'

   doLast {
      def dest = new File(System.properties['user.home'], directory)
      def lib = new File(dest, 'lib')
      lib.deleteDir();
      lib.mkdirs();

      configurations.runtime.each {
         if (!it.name.contains("IHMCHumanoidOperatorInterface"))
         {
            def src = file(it)
            copy {
               from src
               into lib
            }
         }
      }

      copy {
         from jar.archivePath
         into dest
         rename { fileName -> "ValkyrieController.jar" }
      }
   }
}

task deploy(dependsOn: ['jar']) {
   def projectDir = project.buildscript.sourceFile.parent
   def directory = 'valkyrie'

   doLast {
      if (!project.hasProperty('valkyrie_realtime_username') || !project.hasProperty('valkyrie_realtime_password'))
      {
         println("Please set valkyrie_realtime_username and valkyrie_realtime_password in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      if (!project.hasProperty('valkyrie_link_ip') || !project.hasProperty('valkyrie_zelda_ip'))
      {
         println("Please set valkyrie_link_ip and valkyrie_zelda_ip in ~/.gradle/gradle.properties. See https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_properties_and_system_properties for more information.")
      }

      ssh.run {
         session(remotes.valkyrieRealtimeComputer) {
            execute("rm -rf " + directory + "/lib")
            execute("mkdir -p " + directory + "/lib")
            execute("mkdir -p " + directory + "/Configurations")

            configurations.runtime.each {
               put it, directory + '/lib'
            }

            put jar.archivePath, directory + '/ValkyrieController.jar'

            def scriptDir = new File(projectDir, "launchScripts/")
            def scriptDirCollection = files { scriptDir.listFiles() }
            put scriptDirCollection, directory

            scriptDirCollection.each {
               execute 'chmod 777 ' + directory + '/' + it.name
            }
         }

         session(remotes.valkyrieNonRealtimeComputer) {
            execute("rm -rf " + directory + "/lib")
            execute("mkdir -p " + directory + "/lib")
            execute("mkdir -p " + directory + "/Configurations")

            configurations.runtime.each {
               put it, directory + '/lib'
            }

            put jar.archivePath, directory + '/ValkyrieController.jar'

            def scriptDir = new File(projectDir, "launchScripts/")
            def scriptDirCollection = files { scriptDir.listFiles() }
            put scriptDirCollection, directory

            scriptDirCollection.each {
               execute 'chmod 777 ' + directory + '/' + it.name
            }
         }
      }
   }
}

//task createRosJar(type: Jar) {
//   def gitRepo;
//   if (!project.parent.hasProperty("repo"))
//   {
//      gitRepo = Grgit.open(projectDir.canonicalFile.parent)
//   } else
//   {
//      gitRepo = project.parent.repo
//   }
//   version = gitRepo.head().abbreviatedId;
//   manifest {
//      attributes 'Implementation-Title': 'ROSAPI',
//            'Implementation-Version': version,
//            'Main-Class': 'us.ihmc.valkyrie.OpenHumanoidsSimulator'
//   }
//
//   baseName = 'OpenHumanoidsSimulator'
//   from({ configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }) {
//      exclude "META-INF/*.SF"
//      exclude "META-INF/*.DSA"
//      exclude "META-INF/*.RSA"
//      with jar
//   }
//}

//task OH(type: Copy, dependsOn: [createRosJar]) {
//   from createRosJar
//   into "lib/"
//}
