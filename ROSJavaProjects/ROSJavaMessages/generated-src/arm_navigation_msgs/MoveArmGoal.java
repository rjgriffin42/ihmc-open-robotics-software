package arm_navigation_msgs;

public interface MoveArmGoal extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "arm_navigation_msgs/MoveArmGoal";
  static final java.lang.String _DEFINITION = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# Service name to call for getting a motion plan\n# Move arm will call a service on this service name \n# using the MotionPlanRequest specified here\nstring planner_service_name\n\n# A planning scene diff\nPlanningScene planning_scene_diff\n\n# A motion planning request\nMotionPlanRequest motion_plan_request\n\n# OPTIONAL: Diff uses ordered collision operations in addition to allowed_collision_matrix\narm_navigation_msgs/OrderedCollisionOperations operations\n\n# OPTIONAL flag\n# Setting this flag to true will allow move_arm to accept plans that do not go all the way to the goal\nbool accept_partial_plans\n\n# OPTIONAL flag\n# Setting this flag to true will allow move_arm to accept invalid goals\n# This is useful if you are using a planner like CHOMP along with a noisy rapidly changing collision map\n# and you would like to plan to a goal near an object.\nbool accept_invalid_goals\n\n# OPTIONAL flag\n# Setting this flag to true will disable the call to IK for a pose goal\nbool disable_ik\n\n# OPTIONAL flag\n# Setting this flag to true will disable collision monitoring during execution of a trajectory\nbool disable_collision_monitoring\n";
  java.lang.String getPlannerServiceName();
  void setPlannerServiceName(java.lang.String value);
  arm_navigation_msgs.PlanningScene getPlanningSceneDiff();
  void setPlanningSceneDiff(arm_navigation_msgs.PlanningScene value);
  arm_navigation_msgs.MotionPlanRequest getMotionPlanRequest();
  void setMotionPlanRequest(arm_navigation_msgs.MotionPlanRequest value);
  arm_navigation_msgs.OrderedCollisionOperations getOperations();
  void setOperations(arm_navigation_msgs.OrderedCollisionOperations value);
  boolean getAcceptPartialPlans();
  void setAcceptPartialPlans(boolean value);
  boolean getAcceptInvalidGoals();
  void setAcceptInvalidGoals(boolean value);
  boolean getDisableIk();
  void setDisableIk(boolean value);
  boolean getDisableCollisionMonitoring();
  void setDisableCollisionMonitoring(boolean value);
}
