package object_manipulation_msgs;

public interface ReactiveGraspGoal extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "object_manipulation_msgs/ReactiveGraspGoal";
  static final java.lang.String _DEFINITION = "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n# an action for reactive grasping\n# a reactive grasp starts from the current pose of the gripper and ends\n# at a desired grasp pose, presumably using the touch sensors along the way\n\n# the name of the arm being used\nstring arm_name\n\n# the object to be grasped\nGraspableObject target\n\n# the desired grasp pose for the hand\ngeometry_msgs/PoseStamped final_grasp_pose\n\n# the joint trajectory to use for the approach (if available)\n# this trajectory is expected to start at the current pose of the gripper\n# and end at the desired grasp pose\ntrajectory_msgs/JointTrajectory trajectory\n\n# the name of the support surface in the collision environment, if any\nstring collision_support_surface_name\n\n# The internal posture of the hand for the pre-grasp\n# only positions are used\nsensor_msgs/JointState pre_grasp_posture\n\n# The internal posture of the hand for the grasp\n# positions and efforts are used\nsensor_msgs/JointState grasp_posture\n\n# The max contact force to use while grasping (<=0 to disable)\nfloat32 max_contact_force\n\n";
  java.lang.String getArmName();
  void setArmName(java.lang.String value);
  object_manipulation_msgs.GraspableObject getTarget();
  void setTarget(object_manipulation_msgs.GraspableObject value);
  geometry_msgs.PoseStamped getFinalGraspPose();
  void setFinalGraspPose(geometry_msgs.PoseStamped value);
  trajectory_msgs.JointTrajectory getTrajectory();
  void setTrajectory(trajectory_msgs.JointTrajectory value);
  java.lang.String getCollisionSupportSurfaceName();
  void setCollisionSupportSurfaceName(java.lang.String value);
  sensor_msgs.JointState getPreGraspPosture();
  void setPreGraspPosture(sensor_msgs.JointState value);
  sensor_msgs.JointState getGraspPosture();
  void setGraspPosture(sensor_msgs.JointState value);
  float getMaxContactForce();
  void setMaxContactForce(float value);
}
